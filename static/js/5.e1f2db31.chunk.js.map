{"version":3,"sources":["utils/unit.js","utils/constant.js","utils/liba.js","components/auction/bid-table.js","components/auction/bid-form.js","components/auction/reveal-form.js","routes/auction.js"],"names":["getUnitByAddress","supportedTokens","address","token","_","find","supportedToken","symbol","formatCurrencyValue","value","unit","toNumber","web3","utils","fromWei","formatCelrValue","EMPTY_ADDRESS","BN","BID","REVEAL","CLAIM","CHALLENGE","FINALIZE","FINALIZED","EXPIRED","getCurrentPeriod","network","auction","auctionPeriods","blockNumber","get","auctionPeriod","args","bidEnd","revealEnd","claimEnd","challengeEnd","finalizeEnd","finalized","getWinners","bids","topLoser","winners","remainingValue","sort","compareBid","forEach","bid","bidder","push","last","calculateRepay","result","rate","includes","add","muln","parseInt","divn","console","log","toString","bid1","bid2","rate1","celerValue1","rate2","celerValue2","columns","title","dataIndex","BidTable","this","props","tokenAddress","dataSource","filter","map","celerValue","pagination","React","Component","drizzleConnect","state","BidForm","context","onSubmit","onClose","form","current","validateFields","err","values","salt","adjustedRate","contracts","LiBA","methods","placeBid","cacheSend","soliditySha3","toWei","createRef","drizzle","visible","formItems","name","field","fieldOptions","currencyFieldOptions","placeholder","rules","minValueRule","message","required","rateFieldOptions","step","precision","label","celerFieldOptions","onOk","onCancel","ref","items","contextTypes","PropTypes","object","RevealForm","commitmentID","revealBid","PoLC","commitmentOptions","commitmentsByUser","commitment","id","availableValue","options","Step","Steps","steps","Auction","takeAction","currentPeriod","toggleBidModal","toggleRevealModal","claimWinners","challengeWinners","finalizeAuction","setState","prevState","isBidModalVisible","isRevealModalVisible","auctionId","send","calculatedWinners","isEqual","notification","error","challenger","difference","finalizeBid","collectCollateral","repayAuction","sendArgs","renderAction","accounts","currentStep","currentAccount","asker","block","type","onClick","renderAuctionDetail","collateralAddress","collateralValue","duration","maxRate","minValue","style","marginTop","span","TabPane","tab","key","size","bordered","renderItem","winner","Item","match","params","events","RevealBid","fromBlock","event","returnValues","bidsByUser","cacheCall","ClaimWinners","alertMsg","showIcon","actions","auctions","getAuction","getAuctionPeriod","indexOf"],"mappings":"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","file":"static/js/5.e1f2db31.chunk.js","sourcesContent":["import _ from 'lodash';\nimport web3 from 'web3';\n\nimport './network';\n\nexport const getUnitByAddress = (supportedTokens, address) => {\n    const token = _.find(\n        supportedTokens,\n        supportedToken => supportedToken.address === address\n    );\n\n    if (!token) {\n        return '';\n    }\n    return token.symbol;\n};\n\nexport const formatCurrencyValue = (value, unit) => {\n    const num = _.toNumber(value);\n\n    if (num < 100000) {\n        return `${value} wei`;\n    }\n\n    return `${web3.utils.fromWei(value)} ${unit}`;\n};\n\nexport const formatCelrValue = value => {\n    return formatCurrencyValue(value, 'CELR');\n};\n","export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\n","import _ from 'lodash';\nimport web3 from 'web3';\n\nconst { BN } = web3.utils;\n\nexport const BID = 'Bid';\nexport const REVEAL = 'Reveal';\nexport const CLAIM = 'Claim';\nexport const CHALLENGE = 'Challenge';\nexport const FINALIZE = 'Finalize';\nexport const FINALIZED = 'Finalized';\nexport const EXPIRED = 'Expired';\nexport const UNKNOWN = 'Unknown';\n\nexport const getCurrentPeriod = (network, auction, auctionPeriods) => {\n    const blockNumber = _.get(network, 'block.number');\n    const auctionPeriod = _.find(\n        auctionPeriods,\n        auctionPeriod => auctionPeriod.args[0] === auction.args[0]\n    );\n    const {\n        bidEnd,\n        revealEnd,\n        claimEnd,\n        challengeEnd,\n        finalizeEnd,\n        finalized\n    } = _.get(auctionPeriod, 'value', {});\n\n    if (blockNumber < _.toNumber(bidEnd)) {\n        return BID;\n    }\n\n    if (blockNumber < _.toNumber(revealEnd)) {\n        return REVEAL;\n    }\n\n    if (blockNumber < _.toNumber(claimEnd)) {\n        return CLAIM;\n    }\n\n    if (blockNumber < _.toNumber(challengeEnd)) {\n        return CHALLENGE;\n    }\n\n    if (blockNumber < _.toNumber(finalizeEnd)) {\n        return FINALIZE;\n    }\n\n    if (finalized) {\n        return FINALIZED;\n    }\n\n    return EXPIRED;\n};\n\nexport const getWinners = (auction, bids) => {\n    const winners = [];\n    let topLoser;\n    let remainingValue = auction.value.value;\n    bids.sort(compareBid);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value } = bid.value;\n\n        if (remainingValue < 0) {\n            topLoser = bidder;\n            return false;\n        }\n\n        remainingValue -= value;\n        winners.push(bidder);\n    });\n\n    if (!topLoser) {\n        topLoser = _.last(winners);\n    }\n\n    return { winners, topLoser };\n};\n\nexport const calculateRepay = (bids, winners) => {\n    let result = new BN(0);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value, rate } = bid.value;\n\n        if (!_.includes(winners, bidder)) {\n            return;\n        }\n\n        result = result.add(new BN(value).muln(100 + parseInt(rate)).divn(100));\n        console.log(rate, result.toString());\n    });\n\n    return result;\n};\n\nconst compareBid = (bid1, bid2) => {\n    const { rate1, celerValue1 } = bid1.value;\n    const { rate2, celerValue2 } = bid2.value;\n\n    if (rate1 !== rate2) {\n        return rate1 - rate2;\n    }\n\n    return celerValue2 - celerValue1;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Table } from 'antd';\n\nimport {\n    formatCurrencyValue,\n    formatCelrValue,\n    getUnitByAddress\n} from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Bidder',\n        dataIndex: 'bidder'\n    },\n    {\n        title: 'Rate',\n        dataIndex: 'rate'\n    },\n    {\n        title: 'Value',\n        dataIndex: 'value'\n    },\n    {\n        title: 'Celer value',\n        dataIndex: 'celerValue'\n    }\n];\n\nclass BidTable extends React.Component {\n    render() {\n        const { auction, bids, network } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n\n        const dataSource = _.filter(bids).map(bid => {\n            const bidder = bid.args[0];\n\n            return {\n                ...bid.value,\n                bidder,\n                value: formatCurrencyValue(bid.value.value, unit),\n                celerValue: formatCelrValue(bid.value.celerValue)\n            };\n        });\n\n        return (\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n            />\n        );\n    }\n}\n\nBidTable.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    LiBA: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {}\n\nexport default drizzleConnect(BidTable, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport {\n    currencyFieldOptions,\n    celerFieldOptions,\n    rateFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress } from '../../utils/unit';\n\nclass BidForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, salt } = values;\n            const adjustedRate = rate * 1000;\n\n            this.contracts.LiBA.methods.placeBid.cacheSend(\n                auction.args[0],\n                web3.utils.soliditySha3(\n                    adjustedRate,\n                    web3.utils.toWei(value.toString(), 'ether'),\n                    web3.utils.toWei(celerValue.toString(), 'ether'),\n                    salt\n                ),\n                web3.utils.toWei(celerValue.toString(), 'ether')\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                field: 'number',\n                fieldOptions: {\n                    ...rateFieldOptions,\n                    placeholder: 'The lending interest rate',\n                    step: 0.001,\n                    precision: 3\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'Celer Value',\n                field: 'number',\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'salt',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'A random number used to hide your bid info'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a salt!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Bid Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nBidForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nBidForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default BidForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport {\n    celerFieldOptions,\n    currencyFieldOptions,\n    rateFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress, formatCurrencyValue } from '../../utils/unit';\n\nclass RevealForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, salt, commitmentID } = values;\n            const adjustedRate = rate * 1000;\n\n            this.contracts.LiBA.methods.revealBid.cacheSend(\n                auction.args[0],\n                adjustedRate,\n                web3.utils.toWei(value.toString(), 'ether'),\n                web3.utils.toWei(celerValue.toString(), 'ether'),\n                salt,\n                parseInt(commitmentID)\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, PoLC, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const commitmentOptions = _.map(PoLC.commitmentsByUser, commitment => {\n            const id = commitment.args[1];\n            const availableValue = formatCurrencyValue(\n                commitment.value.availableValue,\n                unit\n            );\n\n            return [id, `ID: ${id}, Available Value: ${availableValue}`];\n        });\n\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                field: 'number',\n                fieldOptions: {\n                    ...rateFieldOptions,\n                    step: 0.001,\n                    precision: 3,\n                    placeholder: 'The lending interest rate'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'Celer Value',\n                field: 'number',\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'salt',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'The random number entered for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a salt!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'commitmentID',\n                field: 'select',\n                fieldOptions: {\n                    options: commitmentOptions,\n                    placeholder: 'The commitment in PoLC used for lending'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a commitmentID!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Reveal Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nRevealForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nRevealForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { contracts } = state;\n\n    return {\n        PoLC: contracts.PoLC\n    };\n}\n\nexport default drizzleConnect(RevealForm, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport {\n    Alert,\n    Button,\n    Card,\n    Steps,\n    Skeleton,\n    Statistic,\n    Tabs,\n    List,\n    Row,\n    Col,\n    notification\n} from 'antd';\n\nimport BidTable from '../components/auction/bid-table';\nimport BidForm from '../components/auction/bid-form';\nimport RevealForm from '../components/auction/reveal-form';\nimport { formatCurrencyValue, getUnitByAddress } from '../utils/unit';\nimport {\n    getCurrentPeriod,\n    getWinners,\n    calculateRepay,\n    BID,\n    REVEAL,\n    CLAIM,\n    CHALLENGE,\n    FINALIZE,\n    EXPIRED,\n    FINALIZED\n} from '../utils/liba';\nimport { EMPTY_ADDRESS } from '../utils/constant';\n\nconst { Step } = Steps;\n\nconst steps = [BID, REVEAL, CLAIM, CHALLENGE, FINALIZE];\n\nclass Auction extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.contracts = context.drizzle.contracts;\n        this.state = {\n            auction: null,\n            currentStep: 0,\n            currentPeriod: '',\n            isBidModalVisible: false,\n            isRevealModalVisible: false\n        };\n\n        const auctionId = parseInt(props.match.params.id);\n\n        this.contracts.LiBA.events.RevealBid(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { auctionId, bidder } = event.returnValues;\n                this.contracts.LiBA.methods.bidsByUser.cacheCall(\n                    bidder,\n                    auctionId\n                );\n            }\n        );\n\n        this.contracts.LiBA.events.ClaimWinners(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { winners } = event.returnValues;\n                this.setState({\n                    winners\n                });\n            }\n        );\n    }\n\n    static getDerivedStateFromProps(props) {\n        const { match, LiBA = {}, network } = props;\n\n        const auctions = _.values(LiBA.getAuction);\n        const auction = _.find(\n            auctions,\n            auction => auction.args[0] === match.params.id\n        );\n\n        if (!auction) {\n            return {};\n        }\n\n        const currentPeriod = getCurrentPeriod(\n            network,\n            auction,\n            LiBA.getAuctionPeriod\n        );\n        const currentStep = _.indexOf(steps, currentPeriod);\n        const auctionId = auction.args[0];\n        const bids = _.filter(\n            LiBA.bidsByUser,\n            bid => bid.args[1] === auctionId\n        );\n\n        return { auction, auctionId, bids, currentStep, currentPeriod };\n    }\n\n    takeAction = () => {\n        const { currentPeriod } = this.state;\n\n        switch (currentPeriod) {\n            case BID:\n                return this.toggleBidModal();\n            case REVEAL:\n                return this.toggleRevealModal();\n            case CLAIM:\n                return this.claimWinners();\n            case CHALLENGE:\n                return this.challengeWinners();\n            case FINALIZE:\n                return this.finalizeAuction();\n        }\n    };\n\n    toggleBidModal = () => {\n        this.setState(prevState => ({\n            isBidModalVisible: !prevState.isBidModalVisible\n        }));\n    };\n\n    toggleRevealModal = () => {\n        this.setState(prevState => ({\n            isRevealModalVisible: !prevState.isRevealModalVisible\n        }));\n    };\n\n    claimWinners = () => {\n        const { auctionId } = this.state;\n        const { winners, topLoser } = this.getWinners();\n\n        this.contracts.LiBA.methods\n            .claimWinners(auctionId, winners, topLoser)\n            .send();\n    };\n\n    challengeWinners = () => {\n        const { auctionId, winners } = this.state;\n        const { winners: calculatedWinners, topLoser } = this.getWinners();\n\n        if (_.isEqual(winners, calculatedWinners)) {\n            notification.error({\n                message: 'There is no need to challenge winners'\n            });\n            return;\n        }\n\n        const challenger = _.difference(calculatedWinners, winners)[0];\n\n        this.contracts.LiBA.methods\n            .challengeWinners(\n                auctionId,\n                challenger,\n                calculatedWinners,\n                topLoser\n            )\n            .send();\n    };\n\n    finalizeAuction = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeAuction.cacheSend(auctionId);\n    };\n\n    finalizeBid = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeBid.cacheSend(auctionId);\n    };\n\n    collectCollateral = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.collectCollateral.cacheSend(auctionId);\n    };\n\n    repayAuction = () => {\n        const { auctionId, auction, bids, winners } = this.state;\n        const { tokenAddress } = auction.value;\n        const sendArgs = [auctionId];\n        if (tokenAddress === EMPTY_ADDRESS) {\n            sendArgs.push({\n                value: calculateRepay(bids, winners).toString()\n            });\n        }\n\n        this.contracts.LiBA.methods.repayAuction.cacheSend(...sendArgs);\n    };\n\n    getWinners = () => {\n        const { auction, bids } = this.state;\n        return getWinners(auction, bids);\n    };\n\n    renderAction = () => {\n        const { accounts } = this.props;\n        const { auction, currentPeriod, currentStep, winners } = this.state;\n        const currentAccount = accounts[0];\n        const isAsker = currentAccount === auction.value.asker;\n\n        if (isAsker) {\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button block type=\"primary\" onClick={this.repayAuction}>\n                        Repay\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([CLAIM, FINALIZE], currentPeriod)) {\n                return [];\n            }\n        } else {\n            if (\n                currentPeriod === EXPIRED ||\n                (currentStep === -1 && !_.includes(winners, currentAccount))\n            ) {\n                return [\n                    <Button block type=\"primary\" onClick={this.finalizeBid}>\n                        Withdraw bid\n                    </Button>\n                ];\n            }\n\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button\n                        block\n                        type=\"primary\"\n                        onClick={this.collectCollateral}\n                    >\n                        Collect collateral\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([BID, REVEAL, CHALLENGE], currentPeriod)) {\n                return [];\n            }\n        }\n\n        return [\n            <Button block type=\"primary\" onClick={this.takeAction}>\n                {currentPeriod}\n            </Button>\n        ];\n    };\n\n    renderAuctionDetail = () => {\n        const { network } = this.props;\n        const { auction, bids, winners } = this.state;\n        const {\n            asker,\n            tokenAddress,\n            collateralAddress,\n            collateralValue,\n            value,\n            duration,\n            maxRate,\n            minValue\n        } = auction.value;\n        const unit = getUnitByAddress(network.supportedTokens, tokenAddress);\n        return (\n            <Row style={{ marginTop: '10px' }}>\n                <Col span={24}>\n                    <Statistic title=\"Asker\" value={asker} />\n                </Col>\n                <Col span={24}>\n                    <Statistic title=\"Token Address\" value={tokenAddress} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Value\"\n                        value={formatCurrencyValue(value, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Duration\" value={`${duration} Day`} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Min Value\"\n                        value={formatCurrencyValue(minValue, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Max Rate\" value={`${maxRate} %`} />\n                </Col>\n                {collateralValue > 0 && (\n                    <>\n                        (\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Address\"\n                                value={collateralAddress}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Value\"\n                                value={collateralValue}\n                            />\n                        </Col>\n                    </>\n                )}\n\n                <Col span={24}>\n                    <Tabs>\n                        <Tabs.TabPane tab=\"Bids\" key=\"bids\">\n                            <BidTable\n                                auction={auction}\n                                bids={bids}\n                                network={network}\n                            />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Winners\" key=\"winners\">\n                            <List\n                                size=\"small\"\n                                bordered\n                                dataSource={winners}\n                                renderItem={winner => (\n                                    <List.Item>{winner}</List.Item>\n                                )}\n                            />\n                        </Tabs.TabPane>\n                    </Tabs>\n                </Col>\n            </Row>\n        );\n    };\n\n    render() {\n        const { network } = this.props;\n        const {\n            auction,\n            currentStep,\n            currentPeriod,\n            isBidModalVisible,\n            isRevealModalVisible\n        } = this.state;\n\n        if (!auction) {\n            return <Skeleton />;\n        }\n\n        let alertMsg;\n        if (currentStep === -1)\n            alertMsg = <Alert message={currentPeriod} type=\"info\" showIcon />;\n\n        return (\n            <Card title=\"Auction\" actions={this.renderAction()}>\n                {alertMsg || (\n                    <Steps size=\"small\" current={currentStep}>\n                        {_.map(steps, step => (\n                            <Step key={step} title={step} />\n                        ))}\n                    </Steps>\n                )}\n\n                {this.renderAuctionDetail()}\n                <BidForm\n                    auction={auction}\n                    network={network}\n                    visible={isBidModalVisible}\n                    onClose={this.toggleBidModal}\n                />\n                <RevealForm\n                    auction={auction}\n                    network={network}\n                    visible={isRevealModalVisible}\n                    onClose={this.toggleRevealModal}\n                />\n            </Card>\n        );\n    }\n}\n\nAuction.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nAuction.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts, contracts, LiBA, network } = state;\n\n    return {\n        accounts,\n        network,\n        LiBA: { ...LiBA, ...contracts.LiBA }\n    };\n}\n\nexport default drizzleConnect(Auction, mapStateToProps);\n"],"sourceRoot":""}