{"version":3,"sources":["utils/unit.js","utils/constant.js","utils/liba.js","components/auction/bid-table.js","components/auction/bid-form.js","components/auction/reveal-form.js","routes/auction.js"],"names":["__webpack_require__","d","__webpack_exports__","getUnitByAddress","formatCurrencyValue","formatCelrValue","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","n","web3__WEBPACK_IMPORTED_MODULE_1__","web3__WEBPACK_IMPORTED_MODULE_1___default","supportedTokens","address","token","_","find","supportedToken","symbol","value","unit","toNumber","concat","web3","utils","fromWei","EMPTY_ADDRESS","BN","BID","REVEAL","CLAIM","CHALLENGE","FINALIZE","FINALIZED","EXPIRED","getCurrentPeriod","network","auction","auctionPeriods","blockNumber","get","auctionPeriod","args","_$get","bidEnd","revealEnd","claimEnd","challengeEnd","finalizeEnd","finalized","getWinners","bids","topLoser","winners","remainingValue","sort","compareBid","forEach","bid","bidder","Object","_Users_zhuxuefeng_mygit_celer_cEconomy_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","push","last","calculateRepay","result","_bid$value","rate","includes","add","muln","parseInt","divn","console","log","toString","bid1","bid2","_bid1$value","rate1","celerValue1","_bid2$value","rate2","celerValue2","columns","title","dataIndex","BidTable","_this$props","this","props","tokenAddress","dataSource","filter","map","objectSpread","celerValue","react_default","a","createElement","table","pagination","React","Component","drizzleConnect","state","BidForm","context","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","onClose","form","current","validateFields","err","values","salt","adjustedRate","contracts","LiBA","methods","placeBid","cacheSend","soliditySha3","toWei","createRef","drizzle","_this$props2","visible","formItems","name","field","fieldOptions","currencyFieldOptions","placeholder","rules","minValueRule","message","required","rateFieldOptions","step","precision","label","celerFieldOptions","modal","onOk","onCancel","components_form","ref","items","contextTypes","PropTypes","object","RevealForm","commitmentID","revealBid","PoLC","commitmentOptions","commitmentsByUser","commitment","id","availableValue","options","Step","Steps","steps","Auction","takeAction","currentPeriod","toggleBidModal","toggleRevealModal","claimWinners","challengeWinners","finalizeAuction","setState","prevState","isBidModalVisible","isRevealModalVisible","auctionId","_this$getWinners","send","_this$state","_this$getWinners2","calculatedWinners","isEqual","notification","error","challenger","difference","finalizeBid","collectCollateral","repayAuction","_this$contracts$LiBA$","_this$state2","sendArgs","apply","_this$state3","renderAction","accounts","_this$state4","currentStep","currentAccount","asker","es_button","block","type","onClick","renderAuctionDetail","_this$state5","_auction$value","collateralAddress","collateralValue","duration","maxRate","minValue","row","style","marginTop","col","span","statistic","Fragment","tabs","TabPane","tab","key","bid_table","list","size","bordered","renderItem","winner","Item","match","params","events","RevealBid","fromBlock","event","_event$returnValues","returnValues","bidsByUser","cacheCall","ClaimWinners","alertMsg","_this$state6","es_alert","showIcon","card","actions","bid_form","reveal_form","skeleton","_props$LiBA","auctions","getAuction","getAuctionPeriod","indexOf"],"mappings":"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","file":"static/js/5.d2242c3d.chunk.js","sourcesContent":["import _ from 'lodash';\nimport web3 from 'web3';\n\nimport './network';\n\nexport const getUnitByAddress = (supportedTokens, address) => {\n    const token = _.find(\n        supportedTokens,\n        supportedToken => supportedToken.address === address\n    );\n\n    if (!token) {\n        return '';\n    }\n    return token.symbol;\n};\n\nexport const formatCurrencyValue = (value, unit) => {\n    const num = _.toNumber(value);\n\n    if (num < 100000) {\n        return `${value} wei`;\n    }\n\n    return `${web3.utils.fromWei(value)} ${unit}`;\n};\n\nexport const formatCelrValue = value => {\n    return formatCurrencyValue(value, 'CELR');\n};\n","export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\n","import _ from 'lodash';\nimport web3 from 'web3';\n\nconst { BN } = web3.utils;\n\nexport const BID = 'Bid';\nexport const REVEAL = 'Reveal';\nexport const CLAIM = 'Claim';\nexport const CHALLENGE = 'Challenge';\nexport const FINALIZE = 'Finalize';\nexport const FINALIZED = 'Finalized';\nexport const EXPIRED = 'Expired';\nexport const UNKNOWN = 'Unknown';\n\nexport const getCurrentPeriod = (network, auction, auctionPeriods) => {\n    const blockNumber = _.get(network, 'block.number');\n    const auctionPeriod = _.find(\n        auctionPeriods,\n        auctionPeriod => auctionPeriod.args[0] === auction.args[0]\n    );\n    const {\n        bidEnd,\n        revealEnd,\n        claimEnd,\n        challengeEnd,\n        finalizeEnd,\n        finalized\n    } = _.get(auctionPeriod, 'value', {});\n\n    if (blockNumber < _.toNumber(bidEnd)) {\n        return BID;\n    }\n\n    if (blockNumber < _.toNumber(revealEnd)) {\n        return REVEAL;\n    }\n\n    if (blockNumber < _.toNumber(claimEnd)) {\n        return CLAIM;\n    }\n\n    if (blockNumber < _.toNumber(challengeEnd)) {\n        return CHALLENGE;\n    }\n\n    if (blockNumber < _.toNumber(finalizeEnd)) {\n        return FINALIZE;\n    }\n\n    if (finalized) {\n        return FINALIZED;\n    }\n\n    return EXPIRED;\n};\n\nexport const getWinners = (auction, bids) => {\n    const winners = [];\n    let topLoser;\n    let remainingValue = auction.value.value;\n    bids.sort(compareBid);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value } = bid.value;\n\n        if (remainingValue < 0) {\n            topLoser = bidder;\n            return false;\n        }\n\n        remainingValue -= value;\n        winners.push(bidder);\n    });\n\n    if (!topLoser) {\n        topLoser = _.last(winners);\n    }\n\n    return { winners, topLoser };\n};\n\nexport const calculateRepay = (bids, winners) => {\n    let result = new BN(0);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value, rate } = bid.value;\n\n        if (!_.includes(winners, bidder)) {\n            return;\n        }\n\n        result = result.add(new BN(value).muln(100 + parseInt(rate)).divn(100));\n        console.log(rate, result.toString());\n    });\n\n    return result;\n};\n\nconst compareBid = (bid1, bid2) => {\n    const { rate1, celerValue1 } = bid1.value;\n    const { rate2, celerValue2 } = bid2.value;\n\n    if (rate1 !== rate2) {\n        return rate1 - rate2;\n    }\n\n    return celerValue2 - celerValue1;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Table } from 'antd';\n\nimport {\n    formatCurrencyValue,\n    formatCelrValue,\n    getUnitByAddress\n} from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Bidder',\n        dataIndex: 'bidder'\n    },\n    {\n        title: 'Rate',\n        dataIndex: 'rate'\n    },\n    {\n        title: 'Value',\n        dataIndex: 'value'\n    },\n    {\n        title: 'Celer value',\n        dataIndex: 'celerValue'\n    }\n];\n\nclass BidTable extends React.Component {\n    render() {\n        const { auction, bids, network } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n\n        const dataSource = _.filter(bids).map(bid => {\n            const bidder = bid.args[0];\n\n            return {\n                ...bid.value,\n                bidder,\n                value: formatCurrencyValue(bid.value.value, unit),\n                celerValue: formatCelrValue(bid.value.celerValue)\n            };\n        });\n\n        return (\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n            />\n        );\n    }\n}\n\nBidTable.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    LiBA: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {}\n\nexport default drizzleConnect(BidTable, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport {\n    currencyFieldOptions,\n    celerFieldOptions,\n    rateFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress } from '../../utils/unit';\n\nclass BidForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, salt } = values;\n            const adjustedRate = rate * 1000;\n\n            this.contracts.LiBA.methods.placeBid.cacheSend(\n                auction.args[0],\n                web3.utils.soliditySha3(\n                    adjustedRate,\n                    web3.utils.toWei(value.toString(), 'ether'),\n                    web3.utils.toWei(celerValue.toString(), 'ether'),\n                    salt\n                ),\n                web3.utils.toWei(celerValue.toString(), 'ether')\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                field: 'number',\n                fieldOptions: {\n                    ...rateFieldOptions,\n                    placeholder: 'The lending interest rate',\n                    step: 0.001,\n                    precision: 3\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'Celer Value',\n                field: 'number',\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'salt',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'A random number used to hide your bid info'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a salt!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Bid Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nBidForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nBidForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default BidForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport {\n    celerFieldOptions,\n    currencyFieldOptions,\n    rateFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress, formatCurrencyValue } from '../../utils/unit';\n\nclass RevealForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, salt, commitmentID } = values;\n            const adjustedRate = rate * 1000;\n\n            this.contracts.LiBA.methods.revealBid.cacheSend(\n                auction.args[0],\n                adjustedRate,\n                web3.utils.toWei(value.toString(), 'ether'),\n                web3.utils.toWei(celerValue.toString(), 'ether'),\n                salt,\n                parseInt(commitmentID)\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, PoLC, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const commitmentOptions = _.map(PoLC.commitmentsByUser, commitment => {\n            const id = commitment.args[1];\n            const availableValue = formatCurrencyValue(\n                commitment.value.availableValue,\n                unit\n            );\n\n            return [id, `ID: ${id}, Available Value: ${availableValue}`];\n        });\n\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                field: 'number',\n                fieldOptions: {\n                    ...rateFieldOptions,\n                    step: 0.001,\n                    precision: 3,\n                    placeholder: 'The lending interest rate'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'Celer Value',\n                field: 'number',\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'salt',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'The random number entered for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a salt!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'commitmentID',\n                field: 'select',\n                fieldOptions: {\n                    options: commitmentOptions,\n                    placeholder: 'The commitment in PoLC used for lending'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a commitmentID!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Reveal Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nRevealForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nRevealForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { contracts } = state;\n\n    return {\n        PoLC: contracts.PoLC\n    };\n}\n\nexport default drizzleConnect(RevealForm, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport {\n    Alert,\n    Button,\n    Card,\n    Steps,\n    Skeleton,\n    Statistic,\n    Tabs,\n    List,\n    Row,\n    Col,\n    notification\n} from 'antd';\n\nimport BidTable from '../components/auction/bid-table';\nimport BidForm from '../components/auction/bid-form';\nimport RevealForm from '../components/auction/reveal-form';\nimport { formatCurrencyValue, getUnitByAddress } from '../utils/unit';\nimport {\n    getCurrentPeriod,\n    getWinners,\n    calculateRepay,\n    BID,\n    REVEAL,\n    CLAIM,\n    CHALLENGE,\n    FINALIZE,\n    EXPIRED,\n    FINALIZED\n} from '../utils/liba';\nimport { EMPTY_ADDRESS } from '../utils/constant';\n\nconst { Step } = Steps;\n\nconst steps = [BID, REVEAL, CLAIM, CHALLENGE, FINALIZE];\n\nclass Auction extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.contracts = context.drizzle.contracts;\n        this.state = {\n            auction: null,\n            currentStep: 0,\n            currentPeriod: '',\n            isBidModalVisible: false,\n            isRevealModalVisible: false\n        };\n\n        const auctionId = parseInt(props.match.params.id);\n\n        this.contracts.LiBA.events.RevealBid(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { auctionId, bidder } = event.returnValues;\n                this.contracts.LiBA.methods.bidsByUser.cacheCall(\n                    bidder,\n                    auctionId\n                );\n            }\n        );\n\n        this.contracts.LiBA.events.ClaimWinners(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { winners } = event.returnValues;\n                this.setState({\n                    winners\n                });\n            }\n        );\n    }\n\n    static getDerivedStateFromProps(props) {\n        const { match, LiBA = {}, network } = props;\n\n        const auctions = _.values(LiBA.getAuction);\n        const auction = _.find(\n            auctions,\n            auction => auction.args[0] === match.params.id\n        );\n\n        if (!auction) {\n            return {};\n        }\n\n        const currentPeriod = getCurrentPeriod(\n            network,\n            auction,\n            LiBA.getAuctionPeriod\n        );\n        const currentStep = _.indexOf(steps, currentPeriod);\n        const auctionId = auction.args[0];\n        const bids = _.filter(\n            LiBA.bidsByUser,\n            bid => bid.args[1] === auctionId\n        );\n\n        return { auction, auctionId, bids, currentStep, currentPeriod };\n    }\n\n    takeAction = () => {\n        const { currentPeriod } = this.state;\n\n        switch (currentPeriod) {\n            case BID:\n                return this.toggleBidModal();\n            case REVEAL:\n                return this.toggleRevealModal();\n            case CLAIM:\n                return this.claimWinners();\n            case CHALLENGE:\n                return this.challengeWinners();\n            case FINALIZE:\n                return this.finalizeAuction();\n        }\n    };\n\n    toggleBidModal = () => {\n        this.setState(prevState => ({\n            isBidModalVisible: !prevState.isBidModalVisible\n        }));\n    };\n\n    toggleRevealModal = () => {\n        this.setState(prevState => ({\n            isRevealModalVisible: !prevState.isRevealModalVisible\n        }));\n    };\n\n    claimWinners = () => {\n        const { auctionId } = this.state;\n        const { winners, topLoser } = this.getWinners();\n\n        this.contracts.LiBA.methods\n            .claimWinners(auctionId, winners, topLoser)\n            .send();\n    };\n\n    challengeWinners = () => {\n        const { auctionId, winners } = this.state;\n        const { winners: calculatedWinners, topLoser } = this.getWinners();\n\n        if (_.isEqual(winners, calculatedWinners)) {\n            notification.error({\n                message: 'There is no need to challenge winners'\n            });\n            return;\n        }\n\n        const challenger = _.difference(calculatedWinners, winners)[0];\n\n        this.contracts.LiBA.methods\n            .challengeWinners(\n                auctionId,\n                challenger,\n                calculatedWinners,\n                topLoser\n            )\n            .send();\n    };\n\n    finalizeAuction = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeAuction.cacheSend(auctionId);\n    };\n\n    finalizeBid = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeBid.cacheSend(auctionId);\n    };\n\n    collectCollateral = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.collectCollateral.cacheSend(auctionId);\n    };\n\n    repayAuction = () => {\n        const { auctionId, auction, bids, winners } = this.state;\n        const { tokenAddress } = auction.value;\n        const sendArgs = [auctionId];\n        if (tokenAddress === EMPTY_ADDRESS) {\n            sendArgs.push({\n                value: calculateRepay(bids, winners).toString()\n            });\n        }\n\n        this.contracts.LiBA.methods.repayAuction.cacheSend(...sendArgs);\n    };\n\n    getWinners = () => {\n        const { auction, bids } = this.state;\n        return getWinners(auction, bids);\n    };\n\n    renderAction = () => {\n        const { accounts } = this.props;\n        const { auction, currentPeriod, currentStep, winners } = this.state;\n        const currentAccount = accounts[0];\n        const isAsker = currentAccount === auction.value.asker;\n\n        if (isAsker) {\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button block type=\"primary\" onClick={this.repayAuction}>\n                        Repay\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([CLAIM, FINALIZE], currentPeriod)) {\n                return [];\n            }\n        } else {\n            if (\n                currentPeriod === EXPIRED ||\n                (currentStep === -1 && !_.includes(winners, currentAccount))\n            ) {\n                return [\n                    <Button block type=\"primary\" onClick={this.finalizeBid}>\n                        Withdraw bid\n                    </Button>\n                ];\n            }\n\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button\n                        block\n                        type=\"primary\"\n                        onClick={this.collectCollateral}\n                    >\n                        Collect collateral\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([BID, REVEAL, CHALLENGE], currentPeriod)) {\n                return [];\n            }\n        }\n\n        return [\n            <Button block type=\"primary\" onClick={this.takeAction}>\n                {currentPeriod}\n            </Button>\n        ];\n    };\n\n    renderAuctionDetail = () => {\n        const { network } = this.props;\n        const { auction, bids, winners } = this.state;\n        const {\n            asker,\n            tokenAddress,\n            collateralAddress,\n            collateralValue,\n            value,\n            duration,\n            maxRate,\n            minValue\n        } = auction.value;\n        const unit = getUnitByAddress(network.supportedTokens, tokenAddress);\n        return (\n            <Row style={{ marginTop: '10px' }}>\n                <Col span={24}>\n                    <Statistic title=\"Asker\" value={asker} />\n                </Col>\n                <Col span={24}>\n                    <Statistic title=\"Token Address\" value={tokenAddress} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Value\"\n                        value={formatCurrencyValue(value, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Duration\" value={`${duration} Day`} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Min Value\"\n                        value={formatCurrencyValue(minValue, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Max Rate\" value={`${maxRate} %`} />\n                </Col>\n                {collateralValue > 0 && (\n                    <>\n                        (\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Address\"\n                                value={collateralAddress}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Value\"\n                                value={collateralValue}\n                            />\n                        </Col>\n                    </>\n                )}\n\n                <Col span={24}>\n                    <Tabs>\n                        <Tabs.TabPane tab=\"Bids\" key=\"bids\">\n                            <BidTable\n                                auction={auction}\n                                bids={bids}\n                                network={network}\n                            />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Winners\" key=\"winners\">\n                            <List\n                                size=\"small\"\n                                bordered\n                                dataSource={winners}\n                                renderItem={winner => (\n                                    <List.Item>{winner}</List.Item>\n                                )}\n                            />\n                        </Tabs.TabPane>\n                    </Tabs>\n                </Col>\n            </Row>\n        );\n    };\n\n    render() {\n        const { network } = this.props;\n        const {\n            auction,\n            currentStep,\n            currentPeriod,\n            isBidModalVisible,\n            isRevealModalVisible\n        } = this.state;\n\n        if (!auction) {\n            return <Skeleton />;\n        }\n\n        let alertMsg;\n        if (currentStep === -1)\n            alertMsg = <Alert message={currentPeriod} type=\"info\" showIcon />;\n\n        return (\n            <Card title=\"Auction\" actions={this.renderAction()}>\n                {alertMsg || (\n                    <Steps size=\"small\" current={currentStep}>\n                        {_.map(steps, step => (\n                            <Step key={step} title={step} />\n                        ))}\n                    </Steps>\n                )}\n\n                {this.renderAuctionDetail()}\n                <BidForm\n                    auction={auction}\n                    network={network}\n                    visible={isBidModalVisible}\n                    onClose={this.toggleBidModal}\n                />\n                <RevealForm\n                    auction={auction}\n                    network={network}\n                    visible={isRevealModalVisible}\n                    onClose={this.toggleRevealModal}\n                />\n            </Card>\n        );\n    }\n}\n\nAuction.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nAuction.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts, contracts, LiBA, network } = state;\n\n    return {\n        accounts,\n        network,\n        LiBA: { ...LiBA, ...contracts.LiBA }\n    };\n}\n\nexport default drizzleConnect(Auction, mapStateToProps);\n"],"sourceRoot":""}