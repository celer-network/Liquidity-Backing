{"version":3,"sources":["utils/unit.js","utils/constant.js","utils/liba.js","components/auction/bid-table.js","components/auction/bid-form.js","components/auction/reveal-form.js","routes/auction.js"],"names":["__webpack_require__","d","__webpack_exports__","getUnitByAddress","formatCurrencyValue","formatCelrValue","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","n","web3__WEBPACK_IMPORTED_MODULE_1__","web3__WEBPACK_IMPORTED_MODULE_1___default","supportedTokens","address","token","_","find","supportedToken","symbol","value","unit","toNumber","concat","web3","utils","fromWei","EMPTY_ADDRESS","BN","BID","REVEAL","CLAIM","CHALLENGE","FINALIZE","FINALIZED","EXPIRED","getCurrentPeriod","network","auction","auctionPeriods","blockNumber","get","auctionPeriod","args","_$get","bidEnd","revealEnd","claimEnd","challengeEnd","finalizeEnd","finalized","getWinners","bids","result","remainingValue","sort","compareBid","forEach","bid","bidder","Object","_Users_zhuxuefeng_mygit_celer_cEconomy_web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","push","calculateRepay","winners","_bid$value","rate","includes","add","muln","parseInt","divn","console","log","toString","bid1","bid2","_bid1$value","rate1","celerValue1","_bid2$value","rate2","celerValue2","columns","title","dataIndex","BidTable","_this$props","this","props","tokenAddress","dataSource","filter","map","objectSpread","celerValue","react_default","a","createElement","table","pagination","React","Component","drizzleConnect","state","BidForm","context","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","onClose","form","current","validateFields","err","values","salt","contracts","LiBA","methods","placeBid","cacheSend","soliditySha3","toWei","createRef","drizzle","_this$props2","visible","formItems","name","field","fieldOptions","currencyFieldOptions","placeholder","rules","minValueRule","message","required","label","celerFieldOptions","modal","onOk","onCancel","components_form","ref","items","contextTypes","PropTypes","object","RevealForm","commitmentID","revealBid","PoLC","commitmentOptions","commitmentsByUser","commitment","id","availableValue","options","Step","Steps","steps","Auction","takeAction","currentPeriod","toggleBidModal","toggleRevealModal","claimWinners","challengeWinners","finalizeAuction","setState","prevState","isBidModalVisible","isRevealModalVisible","auctionId","send","_this$state","calculatedWinners","isEqual","notification","error","finalizeBid","collectCollateral","repayAuction","_this$contracts$LiBA$","_this$state2","sendArgs","apply","_this$state3","renderAction","accounts","_this$state4","currentStep","currentAccount","asker","es_button","block","type","onClick","renderAuctionDetail","_this$state5","_auction$value","collateralAddress","collateralValue","duration","maxRate","minValue","row","style","marginTop","col","span","statistic","Fragment","tabs","TabPane","tab","key","bid_table","list","size","bordered","renderItem","winner","Item","match","params","events","RevealBid","fromBlock","event","_event$returnValues","returnValues","bidsByUser","cacheCall","ClaimWinners","alertMsg","_this$state6","es_alert","showIcon","card","actions","step","bid_form","reveal_form","skeleton","_props$LiBA","auctions","getAuction","getAuctionPeriod","indexOf"],"mappings":"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","file":"static/js/5.7ea51fdc.chunk.js","sourcesContent":["import _ from 'lodash';\nimport web3 from 'web3';\n\nimport './network';\n\nexport const getUnitByAddress = (supportedTokens, address) => {\n    const token = _.find(\n        supportedTokens,\n        supportedToken => supportedToken.address === address\n    );\n\n    if (!token) {\n        return '';\n    }\n    return token.symbol;\n};\n\nexport const formatCurrencyValue = (value, unit) => {\n    const num = _.toNumber(value);\n\n    if (num < 100000) {\n        return `${value} wei`;\n    }\n\n    return `${web3.utils.fromWei(value)} ${unit}`;\n};\n\nexport const formatCelrValue = value => {\n    return formatCurrencyValue(value, 'CELR');\n};\n","export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\n","import _ from 'lodash';\nimport web3 from 'web3';\n\nconst { BN } = web3.utils;\n\nexport const BID = 'Bid';\nexport const REVEAL = 'Reveal';\nexport const CLAIM = 'Claim';\nexport const CHALLENGE = 'Challenge';\nexport const FINALIZE = 'Finalize';\nexport const FINALIZED = 'Finalized';\nexport const EXPIRED = 'Expired';\nexport const UNKNOWN = 'Unknown';\n\nexport const getCurrentPeriod = (network, auction, auctionPeriods) => {\n    const blockNumber = _.get(network, 'block.number');\n    const auctionPeriod = _.find(\n        auctionPeriods,\n        auctionPeriod => auctionPeriod.args[0] === auction.args[0]\n    );\n    const {\n        bidEnd,\n        revealEnd,\n        claimEnd,\n        challengeEnd,\n        finalizeEnd,\n        finalized\n    } = _.get(auctionPeriod, 'value', {});\n\n    if (blockNumber < _.toNumber(bidEnd)) {\n        return BID;\n    }\n\n    if (blockNumber < _.toNumber(revealEnd)) {\n        return REVEAL;\n    }\n\n    if (blockNumber < _.toNumber(claimEnd)) {\n        return CLAIM;\n    }\n\n    if (blockNumber < _.toNumber(challengeEnd)) {\n        return CHALLENGE;\n    }\n\n    if (blockNumber < _.toNumber(finalizeEnd)) {\n        return FINALIZE;\n    }\n\n    if (finalized) {\n        return FINALIZED;\n    }\n\n    return EXPIRED;\n};\n\nexport const getWinners = (auction, bids) => {\n    const result = [];\n    let remainingValue = auction.value.value;\n    bids.sort(compareBid);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value } = bid.value;\n\n        remainingValue -= value;\n        result.push(bidder);\n\n        if (remainingValue < 0) {\n            return false;\n        }\n    });\n\n    return result;\n};\n\nexport const calculateRepay = (bids, winners) => {\n    let result = new BN(0);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value, rate } = bid.value;\n\n        if (!_.includes(winners, bidder)) {\n            return;\n        }\n\n        result = result.add(new BN(value).muln(100 + parseInt(rate)).divn(100));\n        console.log(rate, result.toString());\n    });\n\n    return result;\n};\n\nconst compareBid = (bid1, bid2) => {\n    const { rate1, celerValue1 } = bid1.value;\n    const { rate2, celerValue2 } = bid2.value;\n\n    if (rate1 !== rate2) {\n        return rate1 - rate2;\n    }\n\n    return celerValue2 - celerValue1;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Table } from 'antd';\n\nimport {\n    formatCurrencyValue,\n    formatCelrValue,\n    getUnitByAddress\n} from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Bidder',\n        dataIndex: 'bidder'\n    },\n    {\n        title: 'Rate',\n        dataIndex: 'rate'\n    },\n    {\n        title: 'Value',\n        dataIndex: 'value'\n    },\n    {\n        title: 'Celer value',\n        dataIndex: 'celerValue'\n    }\n];\n\nclass BidTable extends React.Component {\n    render() {\n        const { auction, bids, network } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n\n        const dataSource = _.filter(bids).map(bid => {\n            const bidder = bid.args[0];\n\n            return {\n                ...bid.value,\n                bidder,\n                value: formatCurrencyValue(bid.value.value, unit),\n                celerValue: formatCelrValue(bid.value.celerValue)\n            };\n        });\n\n        return (\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n            />\n        );\n    }\n}\n\nBidTable.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    LiBA: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {}\n\nexport default drizzleConnect(BidTable, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport {\n    currencyFieldOptions,\n    celerFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress } from '../../utils/unit';\n\nclass BidForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, salt } = values;\n\n            this.contracts.LiBA.methods.placeBid.cacheSend(\n                auction.args[0],\n                web3.utils.soliditySha3(\n                    rate,\n                    web3.utils.toWei(value.toString(), 'ether'),\n                    web3.utils.toWei(celerValue.toString(), 'ether'),\n                    salt\n                ),\n                web3.utils.toWei((celerValue + salt).toString(), 'ether')\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'The lending interest rate'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'Celer Value',\n                field: 'number',\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'salt',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'A random number used to hide your bid info'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a salt!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Bid Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nBidForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nBidForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default BidForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport {\n    celerFieldOptions,\n    currencyFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress, formatCurrencyValue } from '../../utils/unit';\n\nclass RevealForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, salt, commitmentID } = values;\n\n            this.contracts.LiBA.methods.revealBid.cacheSend(\n                auction.args[0],\n                rate,\n                web3.utils.toWei(value.toString(), 'ether'),\n                web3.utils.toWei(celerValue.toString(), 'ether'),\n                salt,\n                parseInt(commitmentID)\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, PoLC, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const commitmentOptions = _.map(PoLC.commitmentsByUser, commitment => {\n            const id = commitment.args[1];\n            const availableValue = formatCurrencyValue(\n                commitment.value.availableValue,\n                unit\n            );\n\n            return [id, `ID: ${id}, Available Value: ${availableValue}`];\n        });\n\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'The lending interest rate'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'Celer Value',\n                field: 'number',\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'salt',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'The random number entered for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a salt!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'commitmentID',\n                field: 'select',\n                fieldOptions: {\n                    options: commitmentOptions,\n                    placeholder: 'The commitment in PoLC used for lending'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a commitmentID!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Reveal Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nRevealForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nRevealForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { contracts } = state;\n\n    return {\n        PoLC: contracts.PoLC\n    };\n}\n\nexport default drizzleConnect(RevealForm, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport {\n    Alert,\n    Button,\n    Card,\n    Steps,\n    Skeleton,\n    Statistic,\n    Tabs,\n    List,\n    Row,\n    Col,\n    notification\n} from 'antd';\n\nimport BidTable from '../components/auction/bid-table';\nimport BidForm from '../components/auction/bid-form';\nimport RevealForm from '../components/auction/reveal-form';\nimport { formatCurrencyValue, getUnitByAddress } from '../utils/unit';\nimport {\n    getCurrentPeriod,\n    getWinners,\n    calculateRepay,\n    BID,\n    REVEAL,\n    CLAIM,\n    CHALLENGE,\n    FINALIZE,\n    EXPIRED,\n    FINALIZED\n} from '../utils/liba';\nimport { EMPTY_ADDRESS } from '../utils/constant';\n\nconst { Step } = Steps;\n\nconst steps = [BID, REVEAL, CLAIM, CHALLENGE, FINALIZE];\n\nclass Auction extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.contracts = context.drizzle.contracts;\n        this.state = {\n            auction: null,\n            currentStep: 0,\n            currentPeriod: '',\n            isBidModalVisible: false,\n            isRevealModalVisible: false\n        };\n\n        const auctionId = parseInt(props.match.params.id);\n\n        this.contracts.LiBA.events.RevealBid(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { auctionId, bidder } = event.returnValues;\n                this.contracts.LiBA.methods.bidsByUser.cacheCall(\n                    bidder,\n                    auctionId\n                );\n            }\n        );\n\n        this.contracts.LiBA.events.ClaimWinners(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { winners } = event.returnValues;\n                this.setState({\n                    winners\n                });\n            }\n        );\n    }\n\n    static getDerivedStateFromProps(props) {\n        const { match, LiBA = {}, network } = props;\n\n        const auctions = _.values(LiBA.getAuction);\n        const auction = _.find(\n            auctions,\n            auction => auction.args[0] === match.params.id\n        );\n\n        if (!auction) {\n            return {};\n        }\n\n        const currentPeriod = getCurrentPeriod(\n            network,\n            auction,\n            LiBA.getAuctionPeriod\n        );\n        const currentStep = _.indexOf(steps, currentPeriod);\n        const auctionId = auction.args[0];\n        const bids = _.filter(\n            LiBA.bidsByUser,\n            bid => bid.args[1] === auctionId\n        );\n\n        return { auction, auctionId, bids, currentStep, currentPeriod };\n    }\n\n    takeAction = () => {\n        const { currentPeriod } = this.state;\n\n        switch (currentPeriod) {\n            case BID:\n                return this.toggleBidModal();\n            case REVEAL:\n                return this.toggleRevealModal();\n            case CLAIM:\n                return this.claimWinners();\n            case CHALLENGE:\n                return this.challengeWinners();\n            case FINALIZE:\n                return this.finalizeAuction();\n        }\n    };\n\n    toggleBidModal = () => {\n        this.setState(prevState => ({\n            isBidModalVisible: !prevState.isBidModalVisible\n        }));\n    };\n\n    toggleRevealModal = () => {\n        this.setState(prevState => ({\n            isRevealModalVisible: !prevState.isRevealModalVisible\n        }));\n    };\n\n    claimWinners = () => {\n        const { auctionId } = this.state;\n        const winners = this.getWinners();\n\n        this.contracts.LiBA.methods.claimWinners(auctionId, winners).send();\n    };\n\n    challengeWinners = () => {\n        const { auctionId, winners } = this.state;\n        const calculatedWinners = this.getWinners();\n\n        if (_.isEqual(winners, calculatedWinners)) {\n            notification.error({\n                message: 'There is no need to challenge winners'\n            });\n            return;\n        }\n\n        this.contracts.LiBA.methods\n            .challengeWinners(auctionId, calculatedWinners)\n            .send();\n    };\n\n    finalizeAuction = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeAuction.cacheSend(auctionId);\n    };\n\n    finalizeBid = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeBid.cacheSend(auctionId);\n    };\n\n    collectCollateral = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.collectCollateral.cacheSend(auctionId);\n    };\n\n    repayAuction = () => {\n        const { auctionId, auction, bids, winners } = this.state;\n        const { tokenAddress } = auction.value;\n        const sendArgs = [auctionId];\n        if (tokenAddress === EMPTY_ADDRESS) {\n            sendArgs.push({\n                value: calculateRepay(bids, winners).toString()\n            });\n        }\n\n        this.contracts.LiBA.methods.repayAuction.cacheSend(...sendArgs);\n    };\n\n    getWinners = () => {\n        const { auction, bids } = this.state;\n        return getWinners(auction, bids);\n    };\n\n    renderAction = () => {\n        const { accounts } = this.props;\n        const { auction, currentPeriod, currentStep, winners } = this.state;\n        const currentAccount = accounts[0];\n        const isAsker = currentAccount === auction.value.asker;\n\n        if (isAsker) {\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button block type=\"primary\" onClick={this.repayAuction}>\n                        Repay\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([CLAIM, FINALIZE], currentPeriod)) {\n                return [];\n            }\n        } else {\n            if (\n                currentPeriod === EXPIRED ||\n                (currentStep === -1 && !_.includes(winners, currentAccount))\n            ) {\n                return [\n                    <Button block type=\"primary\" onClick={this.finalizeBid}>\n                        Withdraw bid\n                    </Button>\n                ];\n            }\n\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button\n                        block\n                        type=\"primary\"\n                        onClick={this.collectCollateral}\n                    >\n                        Collect collateral\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([BID, REVEAL, CHALLENGE], currentPeriod)) {\n                return [];\n            }\n        }\n\n        return [\n            <Button block type=\"primary\" onClick={this.takeAction}>\n                {currentPeriod}\n            </Button>\n        ];\n    };\n\n    renderAuctionDetail = () => {\n        const { network } = this.props;\n        const { auction, bids, winners } = this.state;\n        const {\n            asker,\n            tokenAddress,\n            collateralAddress,\n            collateralValue,\n            value,\n            duration,\n            maxRate,\n            minValue\n        } = auction.value;\n        const unit = getUnitByAddress(network.supportedTokens, tokenAddress);\n        return (\n            <Row style={{ marginTop: '10px' }}>\n                <Col span={24}>\n                    <Statistic title=\"Asker\" value={asker} />\n                </Col>\n                <Col span={24}>\n                    <Statistic title=\"Token Address\" value={tokenAddress} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Value\"\n                        value={formatCurrencyValue(value, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Duration\" value={duration} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Min Value\"\n                        value={formatCurrencyValue(minValue, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Max Rate\" value={maxRate} />\n                </Col>\n                {collateralValue > 0 && (\n                    <>\n                        (\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Address\"\n                                value={collateralAddress}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Value\"\n                                value={collateralValue}\n                            />\n                        </Col>\n                    </>\n                )}\n\n                <Col span={24}>\n                    <Tabs>\n                        <Tabs.TabPane tab=\"Bids\" key=\"bids\">\n                            <BidTable\n                                auction={auction}\n                                bids={bids}\n                                network={network}\n                            />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Winners\" key=\"winners\">\n                            <List\n                                size=\"small\"\n                                bordered\n                                dataSource={winners}\n                                renderItem={winner => (\n                                    <List.Item>{winner}</List.Item>\n                                )}\n                            />\n                        </Tabs.TabPane>\n                    </Tabs>\n                </Col>\n            </Row>\n        );\n    };\n\n    render() {\n        const { network } = this.props;\n        const {\n            auction,\n            currentStep,\n            currentPeriod,\n            isBidModalVisible,\n            isRevealModalVisible\n        } = this.state;\n\n        if (!auction) {\n            return <Skeleton />;\n        }\n\n        let alertMsg;\n        if (currentStep === -1)\n            alertMsg = <Alert message={currentPeriod} type=\"info\" showIcon />;\n\n        return (\n            <Card title=\"Auction\" actions={this.renderAction()}>\n                {alertMsg || (\n                    <Steps size=\"small\" current={currentStep}>\n                        {_.map(steps, step => (\n                            <Step key={step} title={step} />\n                        ))}\n                    </Steps>\n                )}\n\n                {this.renderAuctionDetail()}\n                <BidForm\n                    auction={auction}\n                    network={network}\n                    visible={isBidModalVisible}\n                    onClose={this.toggleBidModal}\n                />\n                <RevealForm\n                    auction={auction}\n                    network={network}\n                    visible={isRevealModalVisible}\n                    onClose={this.toggleRevealModal}\n                />\n            </Card>\n        );\n    }\n}\n\nAuction.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nAuction.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts, contracts, LiBA, network } = state;\n\n    return {\n        accounts,\n        network,\n        LiBA: { ...LiBA, ...contracts.LiBA }\n    };\n}\n\nexport default drizzleConnect(Auction, mapStateToProps);\n"],"sourceRoot":""}