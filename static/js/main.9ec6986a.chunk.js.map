{"version":3,"sources":["utils/network.js","utils/contracts.js","models/polc.js","models/liba.js","models/network.js","index.js","App.js","utils/subscribe.js","router.js"],"names":["__webpack_require__","d","__webpack_exports__","getNetworkConfig","checkNetworkCompatbility","antd__WEBPACK_IMPORTED_MODULE_0__","networkConfigs","localNetworkConfig","supportedTokens","symbol","address","networkID","networkVersion","window","web3","currentProvider","Modal","error","title","content","_contracts_PoLC_json__WEBPACK_IMPORTED_MODULE_0__","_contracts_LiBA_json__WEBPACK_IMPORTED_MODULE_1__","contractOptions","block","fallback","type","url","contracts","PoLC","LiBA","polls","accounts","blocks","polc","namespace","state","effects","reducers","save","action","Object","objectSpread","payload","liba","addBid","bids","concat","toConsumableArray","auctionId","models_network","rootSaga","regenerator_default","a","wrap","_context","prev","next","all","drizzleSagas","map","saga","fork","stop","_marked","app","dva","initialState","generateContractsInitialState","extraReducers","drizzleReducers","onError","err","dispatch","resp","message","msg","srv","use","createLoading","model","PoLCModel","LiBAModel","NetworkModel","router","require","default","start","_store","runSaga","Sider","Layout","Content","Footer","App","props","context","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","drizzle","_this$props","account","events","NewCommitment","fromBlock","filter","user","event","_event$returnValues","returnValues","commitmentId","methods","commitmentsByUser","cacheCall","NewAuction","getAuction","getAuctionPeriod","NewBid","bidder","subscribeEvent","blockNumber","selectedAddress","setInterval","location","reload","eth","getBlock","then","number","subscribeChainInfo","_this$props2","children","pathname","react","layout","card","className","drizzle_react_components","accountIndex","units","menu","theme","mode","selectedKeys","slice","Item","key","to","style","textAlign","React","contextTypes","PropTypes","object","withRouter","drizzleConnect","ConnectedRouter","routerRedux","LoadingWrapper","LoadingContainer","redirectToHome","react_default","createElement","RouterConfig","_ref","history","Dynamic","component","Promise","e","bind","Auction","drizzle_react","options","store","loadingComp","Spin","src_App_0","exact","path","render"],"mappings":"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","file":"static/js/main.9ec6986a.chunk.js","sourcesContent":["import { Modal } from 'antd';\n\nconst MAINNET = '1';\nconst ROPSTEN = '3';\n\nconst networkConfigs = {};\n\nconst localNetworkConfig = {\n    supportedTokens: [\n        {\n            symbol: 'ETH',\n            address: '0x0000000000000000000000000000000000000000'\n        }\n    ]\n};\n\nexport const getNetworkConfig = networkID => {\n    if (networkConfigs[networkID]) {\n        return networkConfigs[networkID];\n    }\n\n    return localNetworkConfig;\n};\n\nexport const checkNetworkCompatbility = () => {\n    if (process.env.NODE_ENV === 'development') {\n        return;\n    }\n\n    const networkVersion = window.web3.currentProvider.networkVersion;\n    if (networkVersion !== MAINNET && networkVersion !== ROPSTEN) {\n        Modal.error({\n            title: 'Current network is not supported',\n            content: 'Please switch to mainnet or ropsten'\n        });\n    }\n};\n","import PoLC from './../contracts/PoLC.json';\nimport LiBA from './../contracts/LiBA.json';\n\n// let drizzle know what contracts we want\nconst contractOptions = {\n    web3: {\n        block: false,\n        fallback: {\n            type: 'ws',\n            url: 'ws://localhost:8545'\n        }\n    },\n    contracts: [PoLC, LiBA],\n    polls: {\n        accounts: 1000,\n        blocks: 1000\n    }\n};\n\nexport default contractOptions;\n","export default {\n    namespace: 'PoLC',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'LiBA',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        addBid(state, action) {\n            return {\n                ...state,\n                bids: [...(state.bids || []), action.payload.auctionId]\n            };\n        },\n\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'network',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","import dva from 'dva';\nimport createLoading from 'dva-loading';\nimport { all, fork } from 'redux-saga/effects';\nimport {\n    generateContractsInitialState,\n    drizzleReducers,\n    drizzleSagas\n} from 'drizzle';\nimport { message } from 'antd';\n\nimport contractOptions from './utils/contracts';\nimport { checkNetworkCompatbility } from './utils/network';\nimport PoLCModel from './models/polc';\nimport LiBAModel from './models/liba';\nimport NetworkModel from './models/network';\n\nfunction*rootSaga() {\n    yield all(drizzleSagas.map(saga => fork(saga)));\n}\n\ncheckNetworkCompatbility();\n\n// 1. Initialize\nconst app = dva({\n    initialState: {\n        ...generateContractsInitialState(contractOptions)\n    },\n    extraReducers: {\n        ...drizzleReducers\n    },\n    onError(err, dispatch) {\n        if (err.resp) {\n            message.error(err.resp.msg);\n        } else if (err.srv) {\n            message.error(err.srv.msg);\n        } else {\n            message.error(err);\n        }\n    }\n});\n\n// 2. Plugins\napp.use(\n    createLoading({\n        namespace: 'loading'\n        // effects: enable effects level loading state\n    })\n);\n\n// 3. Model\n// Moved to router.js\napp.model(PoLCModel);\napp.model(LiBAModel);\napp.model(NetworkModel);\n\n// 4. Router\napp.router(require('./router.js').default);\n\n// 5. Start\napp.start('#root');\napp._store.runSaga(rootSaga);\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { drizzleConnect } from 'drizzle-react';\nimport { withRouter, Link } from 'dva/router';\nimport { Card, Layout, Menu } from 'antd';\nimport { AccountData } from 'drizzle-react-components';\n\nimport { subscribeEvent, subscribeChainInfo } from './utils/subscribe';\nimport { getNetworkConfig } from './utils/network';\n\nimport './App.css';\n\nconst { Sider, Content, Footer } = Layout;\n\nclass App extends React.Component {\n    constructor(props, context) {\n        super(props);\n        this.contracts = context.drizzle.contracts;\n        this.web3 = context.drizzle.web3;\n    }\n\n    componentWillMount() {\n        const { accounts, dispatch } = this.props;\n        subscribeEvent(accounts[0], this.contracts, dispatch);\n        subscribeChainInfo(this.web3, dispatch);\n\n        dispatch({\n            type: 'network/save',\n            payload: getNetworkConfig(this.web3.currentProvider.networkVersion)\n        });\n    }\n\n    render() {\n        const { children, location } = this.props;\n        const { pathname } = location;\n\n        return (\n            <Layout>\n                <Sider>\n                    <Card className=\"account-data\" title=\"Account info\">\n                        <AccountData accountIndex={0} units={'ether'} />\n                    </Card>\n                    <Menu\n                        theme=\"dark\"\n                        mode=\"inline\"\n                        selectedKeys={[pathname.slice(1)]}\n                    >\n                        <Menu.Item key=\"polc\">\n                            <Link to=\"/polc\">PoLC</Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"liba\">\n                            <Link to=\"/liba\">LiBA</Link>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Content>{children}</Content>\n                    <Footer style={{ textAlign: 'center' }}>\n                        cEconomy ©2019 Created by Celer Network\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\nApp.propTypes = {\n    children: PropTypes.element.isRequired,\n    location: PropTypes.object.isRequired\n};\n\nApp.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts } = state;\n\n    return {\n        accounts\n    };\n}\n\nexport default withRouter(drizzleConnect(App, mapStateToProps));\n","const POLL_INTERVAL = 1000;\n\nexport const subscribeEvent = (account, contracts, dispatch) => {\n    const { PoLC, LiBA } = contracts;\n\n    PoLC.events.NewCommitment(\n        {\n            fromBlock: 0,\n            filter: {\n                user: account\n            }\n        },\n        (err, event) => {\n            if (err) {\n                return;\n            }\n\n            const { commitmentId, user } = event.returnValues;\n            PoLC.methods.commitmentsByUser.cacheCall(user, commitmentId);\n        }\n    );\n\n    LiBA.events.NewAuction(\n        {\n            fromBlock: 0\n        },\n        (err, event) => {\n            if (err) {\n                return;\n            }\n\n            const { auctionId } = event.returnValues;\n            LiBA.methods.getAuction.cacheCall(auctionId);\n            LiBA.methods.getAuctionPeriod.cacheCall(auctionId);\n        }\n    );\n\n    LiBA.events.NewBid(\n        {\n            fromBlock: 0,\n            filter: {\n                bidder: account\n            }\n        },\n        (err, event) => {\n            if (err) {\n                return;\n            }\n\n            const { auctionId } = event.returnValues;\n            dispatch({\n                type: 'LiBA/addBid',\n                payload: { auctionId }\n            });\n        }\n    );\n};\n\nexport const subscribeChainInfo = (web3, dispatch) => {\n    const account = web3.currentProvider.selectedAddress;\n    let blockNumber;\n\n    setInterval(() => {\n        if (account !== web3.currentProvider.selectedAddress) {\n            window.location.reload();\n        }\n\n        return web3.eth.getBlock('latest').then(block => {\n            if (block && blockNumber !== block.number) {\n                dispatch({\n                    type: 'network/save',\n                    payload: { block }\n                });\n                blockNumber = block.number;\n            }\n        });\n    }, POLL_INTERVAL);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, routerRedux, Switch, Route, Redirect } from 'dva/router';\nimport Dynamic from 'dva/dynamic';\nimport { DrizzleProvider } from 'drizzle-react';\nimport { LoadingContainer } from 'drizzle-react-components';\nimport { Spin } from 'antd';\n\nimport App from './App';\nimport contractOptions from './utils/contracts';\n\nconst { ConnectedRouter } = routerRedux;\nconst LoadingWrapper = withRouter(LoadingContainer);\n\nconst redirectToHome = () => <Redirect to=\"/polc\" />;\n\nfunction RouterConfig({ history, app }) {\n    const PoLC = Dynamic({\n        app,\n        component: () => import('./routes/polc')\n    });\n    const LiBA = Dynamic({\n        app,\n        component: () => import('./routes/liba')\n    });\n    const Auction = Dynamic({\n        app,\n        component: () => import('./routes/auction')\n    });\n\n    return (\n        <DrizzleProvider options={contractOptions} store={app._store}>\n            <ConnectedRouter history={history}>\n                <LoadingWrapper loadingComp={Spin}>\n                    <App>\n                        <Switch>\n                            <Route exact path=\"/polc\" component={PoLC} />\n                            <Route exact path=\"/liba\" component={LiBA} />\n                            <Route\n                                exact\n                                path=\"/auction/:id\"\n                                component={Auction}\n                            />\n                            <Route exact path=\"/\" render={redirectToHome} />\n                        </Switch>\n                    </App>\n                </LoadingWrapper>\n            </ConnectedRouter>\n        </DrizzleProvider>\n    );\n}\n\nRouterConfig.propTypes = {\n    history: PropTypes.object.isRequired\n};\n\nexport default RouterConfig;\n"],"sourceRoot":""}