{"version":3,"sources":["utils/constant.js","utils/liba.js","components/auction/bid-table.js","components/auction/bid-form.js","components/auction/reveal-form.js","routes/auction.js"],"names":["EMPTY_ADDRESS","RATE_PRECISION","RATE_BASE","BN","web3","utils","BID","REVEAL","CLAIM","CHALLENGE","FINALIZE","FINALIZED","EXPIRED","ALL_PERIODS","getAuctionPeriod","auctionPeriods","auction","_","find","auctionPeriod","args","getCurrentPeriod","blockNumber","get","bidEnd","revealEnd","claimEnd","challengeEnd","finalizeEnd","finalized","toNumber","getWinners","bids","topLoser","winners","remainingValue","value","sort","compareBid","forEach","bid","bidder","push","last","calculateRepay","result","rate","includes","add","muln","parseInt","divn","console","log","toString","bid1","bid2","rate1","celerValue1","rate2","celerValue2","columns","title","dataIndex","BidTable","this","props","network","unit","getUnitByAddress","supportedTokens","tokenAddress","dataSource","filter","map","formatCurrencyValue","celerValue","formatCelrValue","pagination","React","Component","drizzleConnect","state","BidForm","context","onSubmit","onClose","form","current","validateFields","err","values","passcode","auctionId","contracts","LiBA","methods","placeBid","cacheSend","soliditySha3","toWei","localStorage","setItem","JSON","stringify","createRef","drizzle","visible","formItems","name","field","fieldOptions","currencyFieldOptions","placeholder","rules","minValueRule","message","required","rateFieldOptions","step","precision","label","celerFieldOptions","onOk","onCancel","type","showIcon","ref","items","contextTypes","PropTypes","object","RevealForm","commitmentID","revealBid","PoLC","commitmentOptions","commitmentsByUser","commitment","id","availableValue","defaultValues","parse","getItem","initialValue","options","Step","Steps","steps","Auction","takeAction","currentPeriod","toggleBidModal","toggleRevealModal","claimWinners","challengeWinners","finalizeAuction","setState","prevState","isBidModalVisible","isRevealModalVisible","send","calculatedWinners","isEqual","notification","error","challenger","difference","finalizeBid","collectCollateral","repayAuction","sendArgs","renderAction","accounts","currentStep","currentAccount","asker","block","onClick","renderAuctionDetail","ownBidResult","collateralAddress","collateralValue","duration","maxRate","minValue","isEmpty","status","span","style","marginTop","TabPane","tab","key","size","bordered","renderItem","winner","Item","renderProgress","action","toLowerCase","blockLeft","blockFieldOptions","formatter","match","params","events","RevealBid","fromBlock","event","returnValues","bidsByUser","cacheCall","ClaimWinners","actions","auctions","getAuction","indexOf"],"mappings":"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","file":"static/js/5.2a20a5c0.chunk.js","sourcesContent":["export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const RATE_PRECISION = 3;\nexport const RATE_BASE = 10 ** RATE_PRECISION;\n","import _ from 'lodash';\nimport web3 from 'web3';\n\nconst { BN } = web3.utils;\n\nexport const BID = 'Bid';\nexport const REVEAL = 'Reveal';\nexport const CLAIM = 'Claim';\nexport const CHALLENGE = 'Challenge';\nexport const FINALIZE = 'Finalize';\nexport const FINALIZED = 'Finalized';\nexport const EXPIRED = 'Expired';\nexport const UNKNOWN = 'Unknown';\nexport const ALL_PERIODS = [BID, REVEAL, CLAIM, CHALLENGE, FINALIZE, FINALIZED, EXPIRED];\n\nexport const getAuctionPeriod = (auctionPeriods, auction) => {\n    return _.find(\n        auctionPeriods,\n        auctionPeriod => auctionPeriod.args[0] === auction.args[0]\n    );\n}\n\nexport const getCurrentPeriod = (auctionPeriod, blockNumber) => {\n    const {\n        bidEnd,\n        revealEnd,\n        claimEnd,\n        challengeEnd,\n        finalizeEnd,\n        finalized\n    } = _.get(auctionPeriod, 'value', {});\n\n    if (blockNumber < _.toNumber(bidEnd)) {\n        return BID;\n    }\n\n    if (blockNumber < _.toNumber(revealEnd)) {\n        return REVEAL;\n    }\n\n    if (blockNumber < _.toNumber(claimEnd)) {\n        return CLAIM;\n    }\n\n    if (blockNumber < _.toNumber(challengeEnd)) {\n        return CHALLENGE;\n    }\n\n    if (blockNumber < _.toNumber(finalizeEnd)) {\n        return FINALIZE;\n    }\n\n    if (finalized) {\n        return FINALIZED;\n    }\n\n    return EXPIRED;\n};\n\nexport const getWinners = (auction, bids) => {\n    const winners = [];\n    let topLoser;\n    let remainingValue = auction.value.value;\n    bids.sort(compareBid);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value } = bid.value;\n\n        if (remainingValue < 0) {\n            topLoser = bidder;\n            return false;\n        }\n\n        remainingValue -= value;\n        winners.push(bidder);\n    });\n\n    if (!topLoser) {\n        topLoser = _.last(winners);\n    }\n\n    return { winners, topLoser };\n};\n\nexport const calculateRepay = (bids, winners) => {\n    let result = new BN(0);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value, rate } = bid.value;\n\n        if (!_.includes(winners, bidder)) {\n            return;\n        }\n\n        result = result.add(new BN(value).muln(100 + parseInt(rate)).divn(100));\n        console.log(rate, result.toString());\n    });\n\n    return result;\n};\n\nconst compareBid = (bid1, bid2) => {\n    const { rate1, celerValue1 } = bid1.value;\n    const { rate2, celerValue2 } = bid2.value;\n\n    if (rate1 !== rate2) {\n        return rate1 - rate2;\n    }\n\n    return celerValue2 - celerValue1;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Table } from 'antd';\n\nimport {\n    formatCurrencyValue,\n    formatCelrValue,\n    getUnitByAddress\n} from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Bidder',\n        dataIndex: 'bidder'\n    },\n    {\n        title: 'Rate',\n        dataIndex: 'rate'\n    },\n    {\n        title: 'Value',\n        dataIndex: 'value'\n    },\n    {\n        title: 'Celer value',\n        dataIndex: 'celerValue'\n    }\n];\n\nclass BidTable extends React.Component {\n    render() {\n        const { auction, bids, network } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n\n        const dataSource = _.filter(bids).map(bid => {\n            const bidder = bid.args[0];\n\n            return {\n                ...bid.value,\n                bidder,\n                value: formatCurrencyValue(bid.value.value, unit),\n                celerValue: formatCelrValue(bid.value.celerValue)\n            };\n        });\n\n        return (\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n            />\n        );\n    }\n}\n\nBidTable.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    LiBA: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {}\n\nexport default drizzleConnect(BidTable, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal, Alert } from 'antd';\n\nimport Form from '../form';\nimport {\n    currencyFieldOptions,\n    celerFieldOptions,\n    rateFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress } from '../../utils/unit';\nimport { RATE_PRECISION, RATE_BASE } from '../../utils/constant';\n\nclass BidForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, passcode } = values;\n            const auctionId = auction.args[0];\n\n            this.contracts.LiBA.methods.placeBid.cacheSend(\n                auction.args[0],\n                web3.utils.soliditySha3(\n                    rate * RATE_BASE,\n                    web3.utils.toWei(value.toString(), 'ether'),\n                    web3.utils.toWei(celerValue.toString(), 'ether'),\n                    passcode\n                ),\n                web3.utils.toWei(celerValue.toString(), 'ether')\n            );\n\n            localStorage.setItem(`auction${auctionId}`, JSON.stringify(values));\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                field: 'number',\n                fieldOptions: {\n                    ...rateFieldOptions,\n                    placeholder: 'The lending interest rate',\n                    step: 0.1,\n                    precision: RATE_PRECISION\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'CELR Value',\n                field: 'number',\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'passcode',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'A random number used to hide your bid info'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a passcode!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Bid Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Alert\n                    type=\"warning\"\n                    message=\"Once the bid is placed, you have to reveal it, or you will lose staked CELR\"\n                    showIcon\n                />\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nBidForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nBidForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default BidForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport {\n    celerFieldOptions,\n    currencyFieldOptions,\n    rateFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress, formatCurrencyValue } from '../../utils/unit';\nimport { RATE_PRECISION, RATE_BASE } from '../../utils/constant';\n\nclass RevealForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, passcode, commitmentID } = values;\n\n            this.contracts.LiBA.methods.revealBid.cacheSend(\n                auction.args[0],\n                rate * RATE_BASE,\n                web3.utils.toWei(value.toString(), 'ether'),\n                web3.utils.toWei(celerValue.toString(), 'ether'),\n                passcode,\n                parseInt(commitmentID)\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, PoLC, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const commitmentOptions = _.map(PoLC.commitmentsByUser, commitment => {\n            const id = commitment.args[1];\n            const availableValue = formatCurrencyValue(\n                commitment.value.availableValue,\n                unit\n            );\n\n            return [id, `ID: ${id}, Available Value: ${availableValue}`];\n        });\n        const defaultValues = JSON.parse(\n            localStorage.getItem(`auction${auction.args[0]}`) || '{}'\n        );\n\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                initialValue: defaultValues.value,\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                field: 'number',\n                initialValue: defaultValues.rate,\n                fieldOptions: {\n                    ...rateFieldOptions,\n                    step: 0.1,\n                    precision: RATE_PRECISION,\n                    placeholder: 'The lending interest rate'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'Celer Value',\n                field: 'number',\n                initialValue: defaultValues.celerValue,\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'passcode',\n                field: 'number',\n                initialValue: defaultValues.passcode,\n                fieldOptions: {\n                    placeholder: 'The random number entered for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a passcode!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'commitmentID',\n                field: 'select',\n                fieldOptions: {\n                    options: commitmentOptions,\n                    placeholder: 'The commitment in PoLC used for lending'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a commitmentID!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Reveal Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nRevealForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nRevealForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { contracts } = state;\n\n    return {\n        PoLC: contracts.PoLC\n    };\n}\n\nexport default drizzleConnect(RevealForm, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport {\n    Alert,\n    Button,\n    Card,\n    Steps,\n    Skeleton,\n    Statistic,\n    Tabs,\n    List,\n    Row,\n    Col,\n    Divider,\n    Result,\n    notification\n} from 'antd';\n\nimport BidTable from '../components/auction/bid-table';\nimport BidForm from '../components/auction/bid-form';\nimport RevealForm from '../components/auction/reveal-form';\nimport { formatCurrencyValue, getUnitByAddress } from '../utils/unit';\nimport {\n    getAuctionPeriod,\n    getCurrentPeriod,\n    getWinners,\n    calculateRepay,\n    BID,\n    REVEAL,\n    CLAIM,\n    CHALLENGE,\n    FINALIZE,\n    EXPIRED,\n    FINALIZED\n} from '../utils/liba';\nimport { EMPTY_ADDRESS, RATE_BASE } from '../utils/constant';\nimport { blockFieldOptions } from '../utils/form';\n\nconst { Step } = Steps;\n\nconst steps = [BID, REVEAL, CLAIM, CHALLENGE, FINALIZE];\n\nclass Auction extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.contracts = context.drizzle.contracts;\n        this.state = {\n            auction: null,\n            currentStep: 0,\n            currentPeriod: '',\n            isBidModalVisible: false,\n            isRevealModalVisible: false\n        };\n\n        const auctionId = parseInt(props.match.params.id);\n\n        this.contracts.LiBA.events.RevealBid(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { auctionId, bidder } = event.returnValues;\n                this.contracts.LiBA.methods.bidsByUser.cacheCall(\n                    bidder,\n                    auctionId\n                );\n            }\n        );\n\n        this.contracts.LiBA.events.ClaimWinners(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { winners } = event.returnValues;\n                this.setState({\n                    winners\n                });\n            }\n        );\n    }\n\n    static getDerivedStateFromProps(props) {\n        const { match, LiBA = {}, network } = props;\n        const auctions = _.values(LiBA.getAuction);\n        const auction = _.find(\n            auctions,\n            auction => auction.args[0] === match.params.id\n        );\n\n        if (!auction) {\n            return {};\n        }\n\n        const auctionPeriod = getAuctionPeriod(LiBA.getAuctionPeriod, auction);\n        const blockNumber = _.get(network, 'block.number');\n        const currentPeriod = getCurrentPeriod(auctionPeriod, blockNumber);\n        const currentStep = _.indexOf(steps, currentPeriod);\n        const auctionId = auction.args[0];\n        const bids = _.filter(\n            LiBA.bidsByUser,\n            bid => bid.args[1] === auctionId\n        );\n\n        return {\n            auction,\n            auctionId,\n            bids,\n            auctionPeriod,\n            blockNumber,\n            currentPeriod,\n            currentStep\n        };\n    }\n\n    takeAction = () => {\n        const { currentPeriod } = this.state;\n\n        switch (currentPeriod) {\n            case BID:\n                return this.toggleBidModal();\n            case REVEAL:\n                return this.toggleRevealModal();\n            case CLAIM:\n                return this.claimWinners();\n            case CHALLENGE:\n                return this.challengeWinners();\n            case FINALIZE:\n                return this.finalizeAuction();\n        }\n    };\n\n    toggleBidModal = () => {\n        this.setState(prevState => ({\n            isBidModalVisible: !prevState.isBidModalVisible\n        }));\n    };\n\n    toggleRevealModal = () => {\n        this.setState(prevState => ({\n            isRevealModalVisible: !prevState.isRevealModalVisible\n        }));\n    };\n\n    claimWinners = () => {\n        const { auctionId } = this.state;\n        const { winners, topLoser } = this.getWinners();\n\n        this.contracts.LiBA.methods\n            .claimWinners(auctionId, winners, topLoser)\n            .send();\n    };\n\n    challengeWinners = () => {\n        const { auctionId, winners } = this.state;\n        const { winners: calculatedWinners, topLoser } = this.getWinners();\n\n        if (_.isEqual(winners, calculatedWinners)) {\n            notification.error({\n                message: 'There is no need to challenge winners'\n            });\n            return;\n        }\n\n        const challenger = _.difference(calculatedWinners, winners)[0];\n\n        this.contracts.LiBA.methods\n            .challengeWinners(\n                auctionId,\n                challenger,\n                calculatedWinners,\n                topLoser\n            )\n            .send();\n    };\n\n    finalizeAuction = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeAuction.cacheSend(auctionId);\n    };\n\n    finalizeBid = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeBid.cacheSend(auctionId);\n    };\n\n    collectCollateral = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.collectCollateral.cacheSend(auctionId);\n    };\n\n    repayAuction = () => {\n        const { auctionId, auction, bids, winners } = this.state;\n        const { tokenAddress } = auction.value;\n        const sendArgs = [auctionId];\n        if (tokenAddress === EMPTY_ADDRESS) {\n            sendArgs.push({\n                value: calculateRepay(bids, winners).toString()\n            });\n        }\n\n        this.contracts.LiBA.methods.repayAuction.cacheSend(...sendArgs);\n    };\n\n    getWinners = () => {\n        const { auction, bids } = this.state;\n        return getWinners(auction, bids);\n    };\n\n    renderAction = () => {\n        const { accounts } = this.props;\n        const { auction, currentPeriod, currentStep, winners } = this.state;\n        const currentAccount = accounts[0];\n        const isAsker = currentAccount === auction.value.asker;\n\n        if (isAsker) {\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button block type=\"primary\" onClick={this.repayAuction}>\n                        Repay\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([CLAIM, FINALIZE], currentPeriod)) {\n                return [];\n            }\n        } else {\n            if (\n                currentPeriod === EXPIRED ||\n                (currentStep === -1 && !_.includes(winners, currentAccount))\n            ) {\n                return [\n                    <Button block type=\"primary\" onClick={this.finalizeBid}>\n                        Withdraw bid\n                    </Button>\n                ];\n            }\n\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button\n                        block\n                        type=\"primary\"\n                        onClick={this.collectCollateral}\n                    >\n                        Collect collateral\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([BID, REVEAL, CHALLENGE], currentPeriod)) {\n                return [];\n            }\n        }\n\n        return [\n            <Button block type=\"primary\" onClick={this.takeAction}>\n                {currentPeriod}\n            </Button>\n        ];\n    };\n\n    renderAuctionDetail = () => {\n        const { network } = this.props;\n        const { auction, bids, winners } = this.state;\n        const {\n            asker,\n            tokenAddress,\n            collateralAddress,\n            collateralValue,\n            value,\n            duration,\n            maxRate,\n            minValue\n        } = auction.value;\n        const unit = getUnitByAddress(network.supportedTokens, tokenAddress);\n        const defaultValues = JSON.parse(\n            localStorage.getItem(`auction${auction.args[0]}`) || '{}'\n        );\n        let ownBidResult;\n\n        if (_.isEmpty(defaultValues)) {\n            ownBidResult = (\n                <Result status=\"warning\" title=\"You have not placed bid yet\" />\n            );\n        } else {\n            ownBidResult = (\n                <Row>\n                    <Col span={12}>\n                        <Statistic title=\"Value\" value={defaultValues.value} />\n                    </Col>\n                    <Col span={12}>\n                        <Statistic title=\"Rate\" value={defaultValues.rate} />\n                    </Col>{' '}\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Celer Value\"\n                            value={defaultValues.celerValue}\n                        />\n                    </Col>{' '}\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Passcode\"\n                            value={defaultValues.passcode}\n                        />\n                    </Col>\n                </Row>\n            );\n        }\n\n        return (\n            <Row style={{ marginTop: '10px' }}>\n                <Col span={24}>\n                    <Statistic title=\"Asker\" value={asker} />\n                </Col>\n                <Col span={24}>\n                    <Statistic title=\"Token Address\" value={tokenAddress} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Value\"\n                        value={formatCurrencyValue(value, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Duration\" value={`${duration} Day`} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Min Value\"\n                        value={formatCurrencyValue(minValue, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Max Rate\"\n                        value={`${maxRate / RATE_BASE} %`}\n                    />\n                </Col>\n                {collateralValue > 0 && (\n                    <>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Address\"\n                                value={collateralAddress}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Value\"\n                                value={collateralValue}\n                            />\n                        </Col>\n                    </>\n                )}\n\n                <Col span={24}>\n                    <Tabs>\n                        <Tabs.TabPane tab=\"Your Bid\" key=\"own\">\n                            {ownBidResult}\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Bids\" key=\"bids\">\n                            <BidTable\n                                auction={auction}\n                                bids={bids}\n                                network={network}\n                            />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Winners\" key=\"winners\">\n                            <List\n                                size=\"small\"\n                                bordered\n                                dataSource={winners}\n                                renderItem={winner => (\n                                    <List.Item>{winner}</List.Item>\n                                )}\n                            />\n                        </Tabs.TabPane>\n                    </Tabs>\n                </Col>\n            </Row>\n        );\n    };\n\n    renderProgress = () => {\n        const {\n            auctionPeriod,\n            blockNumber,\n            currentPeriod,\n            currentStep\n        } = this.state;\n\n        if (currentStep === -1) {\n            return <Alert type=\"warning\" message={currentPeriod} showIcon />;\n        }\n\n        const action = currentPeriod.toLowerCase();\n        const blockLeft = auctionPeriod.value[action + 'End'] - blockNumber;\n\n        return (\n            <>\n                <Steps size=\"small\" current={currentStep}>\n                    {_.map(steps, step => (\n                        <Step key={step} title={step} />\n                    ))}\n                </Steps>\n\n                <Divider>\n                    {blockFieldOptions.formatter(blockLeft)} left to {action}\n                </Divider>\n            </>\n        );\n    };\n\n    render() {\n        const { network } = this.props;\n        const {\n            auction,\n            currentStep,\n            currentPeriod,\n            isBidModalVisible,\n            isRevealModalVisible\n        } = this.state;\n\n        if (!auction) {\n            return <Skeleton />;\n        }\n\n        return (\n            <Card title=\"Auction\" actions={this.renderAction()}>\n                {this.renderProgress()}\n                {this.renderAuctionDetail()}\n                <BidForm\n                    auction={auction}\n                    network={network}\n                    visible={isBidModalVisible}\n                    onClose={this.toggleBidModal}\n                />\n                <RevealForm\n                    auction={auction}\n                    network={network}\n                    visible={isRevealModalVisible}\n                    onClose={this.toggleRevealModal}\n                />\n            </Card>\n        );\n    }\n}\n\nAuction.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nAuction.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts, contracts, LiBA, network } = state;\n\n    return {\n        accounts,\n        network,\n        LiBA: { ...LiBA, ...contracts.LiBA }\n    };\n}\n\nexport default drizzleConnect(Auction, mapStateToProps);\n"],"sourceRoot":""}