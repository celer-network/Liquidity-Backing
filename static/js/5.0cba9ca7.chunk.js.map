{"version":3,"sources":["components/auction/bid-table.js","components/auction/bid-form.js","components/auction/reveal-form.js","routes/auction.js","utils/constant.js","utils/liba.js"],"names":["columns","title","dataIndex","BidTable","this","props","auction","bids","network","unit","getUnitByAddress","supportedTokens","value","tokenAddress","dataSource","_","filter","map","bid","bidder","args","formatCurrencyValue","celerValue","formatCelrValue","pagination","React","Component","drizzleConnect","state","BidForm","context","onSubmit","onClose","form","current","validateFields","err","values","rate","passcode","auctionId","contracts","LiBA","methods","placeBid","cacheSend","web3","utils","soliditySha3","RATE_BASE","toWei","toString","localStorage","setItem","address","JSON","stringify","createRef","drizzle","visible","maxRate","minValue","formItems","name","field","fieldOptions","currencyFieldOptions","placeholder","rules","minValueRule","message","required","label","rateFieldOptions","step","precision","RATE_PRECISION","maxValueRule","celerFieldOptions","minCELR","onOk","onCancel","type","showIcon","ref","items","contextTypes","PropTypes","object","RevealForm","commitmentID","revealBid","parseInt","PoLC","commitmentOptions","commitmentsByUser","commitment","id","console","log","availableValue","defaultValues","parse","getItem","initialValue","options","Step","Steps","steps","BID","REVEAL","CLAIM","CHALLENGE","FINALIZE","Auction","takeAction","currentPeriod","toggleBidModal","toggleRevealModal","claimWinners","challengeWinners","finalizeAuction","error","setState","prevState","isBidModalVisible","isRevealModalVisible","getWinners","winners","topLoser","send","calculatedWinners","isEqual","notification","challenger","difference","finalizeBid","collectCollateral","repayAuction","sendArgs","EMPTY_ADDRESS","push","calculateRepay","renderAction","accounts","currentStep","currentAccount","asker","FINALIZED","block","onClick","includes","EXPIRED","renderAuctionDetail","ownBidResult","collateralAddress","collateralValue","duration","isEmpty","status","span","style","marginTop","TabPane","tab","key","size","bordered","renderItem","winner","Item","renderProgress","auctionPeriod","blockNumber","action","toLowerCase","blockLeft","blockFieldOptions","formatter","match","params","events","RevealBid","fromBlock","event","returnValues","bidsByUser","cacheCall","ClaimWinners","actions","auctions","getAuction","find","getAuctionPeriod","get","getCurrentPeriod","indexOf","BN","ALL_PERIODS","auctionPeriods","bidEnd","revealEnd","claimEnd","challengeEnd","finalizeEnd","finalized","toNumber","remainingValue","sort","compareBid","forEach","last","result","add","muln","divn","bid1","bid2","rate1","celerValue1","rate2","celerValue2"],"mappings":"6YAYMA,EAAU,CACZ,CACIC,MAAO,SACPC,UAAW,UAEf,CACID,MAAO,OACPC,UAAW,QAEf,CACID,MAAO,QACPC,UAAW,SAEf,CACID,MAAO,cACPC,UAAW,eAIbC,E,iLACQ,IAAD,EAC8BC,KAAKC,MAAhCC,EADH,EACGA,QAASC,EADZ,EACYA,KAAMC,EADlB,EACkBA,QACjBC,EAAOC,YACTF,EAAQG,gBACRL,EAAQM,MAAMC,cAGZC,EAAaC,IAAEC,OAAOT,GAAMU,KAAI,SAAAC,GAClC,IAAMC,EAASD,EAAIE,KAAK,GAExB,OAAO,eACAF,EAAIN,MADX,CAEIO,SACAP,MAAOS,YAAoBH,EAAIN,MAAMA,MAAOH,GAC5Ca,WAAYC,YAAgBL,EAAIN,MAAMU,iBAI9C,OACI,kBAAC,IAAD,CACIR,WAAYA,EACZd,QAASA,EACTwB,YAAY,Q,GAvBLC,IAAMC,WAqCdC,+BAAexB,GAF9B,SAAyByB,O,sDClDnBC,E,YACF,WAAYxB,EAAOyB,GAAU,IAAD,8BACxB,4CAAMzB,KAMV0B,SAAW,WAAO,IAAD,EACgB,EAAK1B,MAA1BC,EADK,EACLA,QAAS0B,EADJ,EACIA,QAEjB,EAAKC,KAAKC,QAAQC,gBAAe,SAACC,EAAKC,GACnC,IAAID,EAAJ,CAD8C,IAKtCd,EAAsCe,EAAtCf,WAAYV,EAA0ByB,EAA1BzB,MAAO0B,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,SAC3BC,EAAYlC,EAAQc,KAAK,GAE/B,EAAKqB,UAAUC,KAAKC,QAAQC,SAASC,UACjCvC,EAAQc,KAAK,GACb0B,IAAKC,MAAMC,aACPV,EAAOW,IACPH,IAAKC,MAAMG,MAAMtC,EAAMuC,WAAY,SACnCL,IAAKC,MAAMG,MAAM5B,EAAW6B,WAAY,SACxCZ,GAEJO,IAAKC,MAAMG,MAAM5B,EAAW6B,WAAY,UAG5CC,aAAaC,QAAb,kBACe,EAAKZ,UAAUC,KAAKY,QADnC,YAC8Cd,GAC1Ce,KAAKC,UAAUnB,IAEnBL,SA9BJ,EAAKC,KAAOR,IAAMgC,YAClB,EAAKhB,UAAYX,EAAQ4B,QAAQjB,UAJT,E,sEAqClB,IAAD,EAC0CrC,KAAKC,MAA5CC,EADH,EACGA,QAASE,EADZ,EACYA,QAASmD,EADrB,EACqBA,QAAS3B,EAD9B,EAC8BA,QAD9B,EAEuC1B,EAAQM,MAA5CC,EAFH,EAEGA,aAAc+C,EAFjB,EAEiBA,QAASC,EAF1B,EAE0BA,SACzBpD,EAAOC,YAAiBF,EAAQG,gBAAiBE,GACjDiD,EAAY,CACd,CACIC,KAAM,QACNC,MAAO,SACPC,aAAa,eACNC,YAAqBzD,GADhB,CAER0D,YAAa,gCAEjBC,MAAO,CACHC,YAAahD,YAAoBwC,IACjC,CACIS,QAAS,wBACTC,UAAU,KAItB,CACIR,KAAM,OACNS,MAAO,aACPR,MAAO,SACPC,aAAa,eACNQ,IADK,CAERN,YAAa,kCACbO,KAAM,GACNC,UAAWC,MAEfR,MAAO,CACHC,YAAa,GACbQ,YAAajB,EAAUX,KACvB,CACIqB,QAAS,uBACTC,UAAU,KAItB,CACIR,KAAM,aACNS,MAAO,aACPR,MAAO,SACPC,aAAa,eACNa,IADK,CAERX,YAAa,0CAEjBC,MAAO,CACHC,YAAa7D,EAAQuE,SACrB,CACIT,QAAS,8BACTC,UAAU,KAItB,CACIR,KAAM,WACNC,MAAO,SACPC,aAAc,CACVE,YAAa,8CAEjBC,MAAO,CACHC,YAAa,KACb,CACIC,QAAS,2BACTC,UAAU,MAM1B,OACI,kBAAC,IAAD,CACItE,MAAM,cACN0D,QAASA,EACTqB,KAAM5E,KAAK2B,SACXkD,SAAUjD,GAEV,kBAAC,IAAD,CACIkD,KAAK,UACLZ,QAAQ,8EACRa,UAAQ,IAEZ,kBAAC,IAAD,CAAMC,IAAKhF,KAAK6B,KAAMoD,MAAOvB,S,GAzHvBrC,IAAMC,WAsI5BG,EAAQyD,aAAe,CACnB5B,QAAS6B,IAAUC,QAGR3D,QCzIT4D,E,YACF,WAAYpF,EAAOyB,GAAU,IAAD,8BACxB,4CAAMzB,KAMV0B,SAAW,WAAO,IAAD,EACgB,EAAK1B,MAA1BC,EADK,EACLA,QAAS0B,EADJ,EACIA,QAEjB,EAAKC,KAAKC,QAAQC,gBAAe,SAACC,EAAKC,GACnC,IAAID,EAAJ,CAD8C,IAKtCd,EAAoDe,EAApDf,WAAYV,EAAwCyB,EAAxCzB,MAAO0B,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,SAAUmD,EAAiBrD,EAAjBqD,aAC3C,EAAKjD,UAAUC,KAAKC,QAAQgD,UAAU9C,UAClCvC,EAAQc,KAAK,GACbkB,EAAOW,IACPH,IAAKC,MAAMG,MAAMtC,EAAMuC,WAAY,SACnCL,IAAKC,MAAMG,MAAM5B,EAAW6B,WAAY,SACxCZ,EACAqD,SAASF,IAEb1D,SArBJ,EAAKC,KAAOR,IAAMgC,YAClB,EAAKhB,UAAYX,EAAQ4B,QAAQjB,UAJT,E,sEA4BlB,IAAD,EACgDrC,KAAKC,MAAlDC,EADH,EACGA,QAASE,EADZ,EACYA,QAASqF,EADrB,EACqBA,KAAMlC,EAD3B,EAC2BA,QAAS3B,EADpC,EACoCA,QACnCvB,EAAOC,YACTF,EAAQG,gBACRL,EAAQM,MAAMC,cAEZiF,EAAoB/E,IAAE8E,EAAKE,mBAC5B/E,QACG,SAAAgF,GAAU,OACNA,EAAWpF,MAAMC,eAAiBP,EAAQM,MAAMC,gBAEvDI,KAAI,SAAA+E,GACD,IAAMC,EAAKD,EAAW5E,KAAK,GAC3B8E,QAAQC,IAAIH,GACZ,IAAMI,EAAiB/E,YACnB2E,EAAWpF,MAAMwF,eACjB3F,GAGJ,MAAO,CAACwF,EAAD,cAAYA,EAAZ,8BAAoCG,OAE9CxF,QACCyF,EAAgB9C,KAAK+C,MACvBlD,aAAamD,QAAb,kBACenG,KAAKqC,UAAUC,KAAKY,QADnC,YAC8ChD,EAAQc,KAAK,MACtD,MAGH0C,EAAY,CACd,CACIC,KAAM,QACNC,MAAO,SACPwC,aAAcH,EAAczF,MAC5BqD,aAAa,eACNC,YAAqBzD,GADhB,CAER0D,YAAa,gCAEjBC,MAAO,CACHC,YAAa,GACb,CACIC,QAAS,wBACTC,UAAU,KAItB,CACIR,KAAM,OACNS,MAAO,aACPR,MAAO,SACPwC,aAAcH,EAAc/D,KAC5B2B,aAAa,eACNQ,IADK,CAERC,KAAM,GACNC,UAAWC,IACXT,YAAa,oCAEjBC,MAAO,CACHC,YAAa,GACb,CACIC,QAAS,uBACTC,UAAU,KAItB,CACIR,KAAM,aACNS,MAAO,cACPR,MAAO,SACPwC,aAAcH,EAAc/E,WAC5B2C,aAAa,eACNa,IADK,CAERX,YAAa,0CAEjBC,MAAO,CACHC,YAAa,GACb,CACIC,QAAS,8BACTC,UAAU,KAItB,CACIR,KAAM,WACNC,MAAO,SACPwC,aAAcH,EAAc9D,SAC5B0B,aAAc,CACVE,YAAa,yCAEjBC,MAAO,CACHC,YAAa,GACb,CACIC,QAAS,2BACTC,UAAU,KAItB,CACIR,KAAM,eACNC,MAAO,SACPC,aAAc,CACVwC,QAASX,EACT3B,YAAa,2CAEjBC,MAAO,CACH,CACIE,QAAS,+BACTC,UAAU,MAM1B,OACI,kBAAC,IAAD,CACItE,MAAM,iBACN0D,QAASA,EACTqB,KAAM5E,KAAK2B,SACXkD,SAAUjD,GAEV,kBAAC,IAAD,CAAMoD,IAAKhF,KAAK6B,KAAMoD,MAAOvB,S,GApJpBrC,IAAMC,WAiK/B+D,EAAWH,aAAe,CACtB5B,QAAS6B,IAAUC,QAWR7D,+BAAe8D,GAR9B,SAAyB7D,GAGrB,MAAO,CACHiE,KAHkBjE,EAAda,UAGYoD,S,SClJhBa,EAASC,IAATD,KAEFE,EAAQ,CAACC,IAAKC,IAAQC,IAAOC,IAAWC,KAExCC,E,YACF,WAAY7G,EAAOyB,GAAU,IAAD,uBACxB,4CAAMzB,KAkFV8G,WAAa,WAGT,OAF0B,EAAKvF,MAAvBwF,eAGJ,KAAKP,IACD,OAAO,EAAKQ,iBAChB,KAAKP,IACD,OAAO,EAAKQ,oBAChB,KAAKP,IACD,OAAO,EAAKQ,eAChB,KAAKP,IACD,OAAO,EAAKQ,mBAChB,KAAKP,IACD,OAAO,EAAKQ,kBAChB,QACIvB,QAAQwB,MAAM,oBAlGE,EAsG5BL,eAAiB,WACb,EAAKM,UAAS,SAAAC,GAAS,MAAK,CACxBC,mBAAoBD,EAAUC,uBAxGV,EA4G5BP,kBAAoB,WAChB,EAAKK,UAAS,SAAAC,GAAS,MAAK,CACxBE,sBAAuBF,EAAUE,0BA9Gb,EAkH5BP,aAAe,WAAO,IACV/E,EAAc,EAAKZ,MAAnBY,UADS,EAEa,EAAKuF,aAA3BC,EAFS,EAETA,QAASC,EAFA,EAEAA,SAEjB,EAAKxF,UAAUC,KAAKC,QACf4E,aAAa/E,EAAWwF,EAASC,GACjCC,QAxHmB,EA2H5BV,iBAAmB,WAAO,IAAD,EACU,EAAK5F,MAA5BY,EADa,EACbA,UAAWwF,EADE,EACFA,QADE,EAE4B,EAAKD,aAArCI,EAFI,EAEbH,QAA4BC,EAFf,EAEeA,SAEpC,GAAIlH,IAAEqH,QAAQJ,EAASG,GACnBE,IAAaX,MAAM,CACfpD,QAAS,8CAFjB,CAOA,IAAMgE,EAAavH,IAAEwH,WAAWJ,EAAmBH,GAAS,GAE5D,EAAKvF,UAAUC,KAAKC,QACf6E,iBACGhF,EACA8F,EACAH,EACAF,GAEHC,SA/ImB,EAkJ5BT,gBAAkB,WAAO,IACbjF,EAAc,EAAKZ,MAAnBY,UACR,EAAKC,UAAUC,KAAKC,QAAQ8E,gBAAgB5E,UAAUL,IApJ9B,EAuJ5BgG,YAAc,WAAO,IACThG,EAAc,EAAKZ,MAAnBY,UACR,EAAKC,UAAUC,KAAKC,QAAQ6F,YAAY3F,UAAUL,IAzJ1B,EA4J5BiG,kBAAoB,WAAO,IACfjG,EAAc,EAAKZ,MAAnBY,UACR,EAAKC,UAAUC,KAAKC,QAAQ8F,kBAAkB5F,UAAUL,IA9JhC,EAiK5BkG,aAAe,WAAO,IAAD,IAC6B,EAAK9G,MAA3CY,EADS,EACTA,UAAWlC,EADF,EACEA,QAASC,EADX,EACWA,KAAMyH,EADjB,EACiBA,QAE5BW,EAAW,CAACnG,GADOlC,EAAQM,MAAzBC,eAEa+H,KACjBD,EAASE,KAAK,CACVjI,MAAOkI,YAAevI,EAAMyH,GAAS7E,cAI7C,IAAKV,UAAUC,KAAKC,QAAQ+F,cAAa7F,UAAzC,QAAsD8F,IA3K9B,EA8K5BZ,WAAa,WAAO,IAAD,EACW,EAAKnG,MAAvBtB,EADO,EACPA,QAASC,EADF,EACEA,KACjB,OAAOwH,YAAWzH,EAASC,IAhLH,EAmL5BwI,aAAe,WAAO,IACVC,EAAa,EAAK3I,MAAlB2I,SADS,EAEwC,EAAKpH,MAAtDtB,EAFS,EAETA,QAAS8G,EAFA,EAEAA,cAAe6B,EAFf,EAEeA,YAAajB,EAF5B,EAE4BA,QACvCkB,EAAiBF,EAAS,GAGhC,GAFgBE,IAAmB5I,EAAQM,MAAMuI,MAEpC,CACT,GAAI/B,IAAkBgC,IAClB,MAAO,CACH,kBAAC,IAAD,CAAQC,OAAK,EAACnE,KAAK,UAAUoE,QAAS,EAAKZ,cAA3C,UAMR,IAAK3H,IAAEwI,SAAS,CAACxC,IAAOE,KAAWG,GAC/B,MAAO,OAER,CACH,GACIA,IAAkBoC,MACA,IAAjBP,IAAuBlI,IAAEwI,SAASvB,EAASkB,GAE5C,MAAO,CACH,kBAAC,IAAD,CAAQG,OAAK,EAACnE,KAAK,UAAUoE,QAAS,EAAKd,aAA3C,iBAMR,GAAIpB,IAAkBgC,IAClB,MAAO,CACH,kBAAC,IAAD,CACIC,OAAK,EACLnE,KAAK,UACLoE,QAAS,EAAKb,mBAHlB,uBAUR,IAAK1H,IAAEwI,SAAS,CAAC1C,IAAKC,IAAQE,KAAYI,GACtC,MAAO,GAIf,MAAO,CACH,kBAAC,IAAD,CAAQiC,OAAK,EAACnE,KAAK,UAAUoE,QAAS,EAAKnC,YACtCC,KApOe,EAyO5BqC,oBAAsB,WAAO,IAmBrBC,EAlBIlJ,EAAY,EAAKH,MAAjBG,QADgB,EAEW,EAAKoB,MAAhCtB,EAFgB,EAEhBA,QAASC,EAFO,EAEPA,KAAMyH,EAFC,EAEDA,QAFC,EAYpB1H,EAAQM,MARRuI,EAJoB,EAIpBA,MACAtI,EALoB,EAKpBA,aACA8I,EANoB,EAMpBA,kBACAC,EAPoB,EAOpBA,gBACAhJ,EARoB,EAQpBA,MACAiJ,EAToB,EASpBA,SACAjG,EAVoB,EAUpBA,QACAC,EAXoB,EAWpBA,SAEEpD,EAAOC,YAAiBF,EAAQG,gBAAiBE,GACjDwF,EAAgB9C,KAAK+C,MACvBlD,aAAamD,QAAb,kBACe,EAAK9D,UAAUC,KAAKY,QADnC,YAC8ChD,EAAQc,KAAK,MACtD,MAuCT,OAlCIsI,EADA3I,IAAE+I,QAAQzD,GAEN,kBAAC,IAAD,CAAQ0D,OAAO,UAAU9J,MAAM,gCAI/B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK+J,KAAM,IACP,kBAAC,IAAD,CACI/J,MAAM,QACNW,MAAK,UAAKyF,EAAczF,MAAnB,aAA6BH,MAG1C,kBAAC,IAAD,CAAKuJ,KAAM,IACP,kBAAC,IAAD,CACI/J,MAAM,aACNW,MAAK,UAAKyF,EAAc/D,KAAnB,SAEN,IACP,kBAAC,IAAD,CAAK0H,KAAM,IACP,kBAAC,IAAD,CACI/J,MAAM,cACNW,MAAK,UAAKyF,EAAc/E,WAAnB,YAEN,IACP,kBAAC,IAAD,CAAK0I,KAAM,IACP,kBAAC,IAAD,CACI/J,MAAM,WACNW,MAAOyF,EAAc9D,aAQrC,kBAAC,IAAD,CAAK0H,MAAO,CAAEC,UAAW,SACrB,kBAAC,IAAD,CAAKF,KAAM,IACP,kBAAC,IAAD,CAAW/J,MAAM,QAAQW,MAAOuI,KAEpC,kBAAC,IAAD,CAAKa,KAAM,IACP,kBAAC,IAAD,CAAW/J,MAAM,gBAAgBW,MAAOC,KAE5C,kBAAC,IAAD,CAAKmJ,KAAM,IACP,kBAAC,IAAD,CACI/J,MAAM,QACNW,MAAOS,YAAoBT,EAAOH,MAG1C,kBAAC,IAAD,CAAKuJ,KAAM,IACP,kBAAC,IAAD,CAAW/J,MAAM,WAAWW,MAAK,UAAKiJ,EAAL,WAErC,kBAAC,IAAD,CAAKG,KAAM,IACP,kBAAC,IAAD,CACI/J,MAAM,YACNW,MAAOS,YAAoBwC,EAAUpD,MAG7C,kBAAC,IAAD,CAAKuJ,KAAM,IACP,kBAAC,IAAD,CACI/J,MAAM,iBACNW,MAAK,UAAKgD,EAAUX,IAAf,SAGZ2G,EAAkB,GACf,oCACI,kBAAC,IAAD,CAAKI,KAAM,IACP,kBAAC,IAAD,CACI/J,MAAM,qBACNW,MAAO+I,KAGf,kBAAC,IAAD,CAAKK,KAAM,IACP,kBAAC,IAAD,CACI/J,MAAM,mBACNW,MAAOgJ,MAMvB,kBAAC,IAAD,CAAKI,KAAM,IACP,kBAAC,IAAD,KACI,kBAAC,IAAKG,QAAN,CAAcC,IAAI,WAAWC,IAAI,OAC5BX,GAEL,kBAAC,IAAKS,QAAN,CAAcC,IAAI,OAAOC,IAAI,QACzB,kBAAC,EAAD,CACI/J,QAASA,EACTC,KAAMA,EACNC,QAASA,KAGjB,kBAAC,IAAK2J,QAAN,CAAcC,IAAI,UAAUC,IAAI,WAC5B,kBAAC,IAAD,CACIC,KAAK,QACLC,UAAQ,EACRzJ,WAAYkH,EACZwC,WAAY,SAAAC,GAAM,OACd,kBAAC,IAAKC,KAAN,KAAYD,WAjWhB,EA2W5BE,eAAiB,WAAO,IAAD,EAMf,EAAK/I,MAJLgJ,EAFe,EAEfA,cACAC,EAHe,EAGfA,YACAzD,EAJe,EAIfA,cACA6B,EALe,EAKfA,YAGJ,IAAqB,IAAjBA,EACA,OAAO,kBAAC,IAAD,CAAO/D,KAAK,UAAUZ,QAAS8C,EAAejC,UAAQ,IAGjE,IAAM2F,EAAS1D,EAAc2D,cACvBC,EAAYJ,EAAchK,MAAMkK,EAAS,OAASD,EAExD,OACI,oCACI,kBAAC,IAAD,CAAOP,KAAK,QAAQpI,QAAS+G,GACxBlI,IAAEE,IAAI2F,GAAO,SAAAlC,GAAI,OACd,kBAACgC,EAAD,CAAM2D,IAAK3F,EAAMzE,MAAOyE,QAIhC,kBAAC,IAAD,KACKuG,IAAkBC,UAAUF,GADjC,YACsDF,KAhY9D,EAAKrI,UAAYX,EAAQ4B,QAAQjB,UACjC,EAAKb,MAAQ,CACTtB,QAAS,KACT2I,YAAa,EACb7B,cAAe,GACfS,mBAAmB,EACnBC,sBAAsB,GAG1B,IAAMtF,EAAYoD,SAASvF,EAAM8K,MAAMC,OAAOnF,IAZtB,OAcxB,EAAKxD,UAAUC,KAAK2I,OAAOC,UACvB,CACIC,UAAW,EACXvK,OAAQ,CAAEwB,eAEd,SAACJ,EAAKoJ,GACF,IAAIpJ,EAAJ,CADY,MAKkBoJ,EAAMC,aAA5BjJ,EALI,EAKJA,UAAWrB,EALP,EAKOA,OACnB,EAAKsB,UAAUC,KAAKC,QAAQ+I,WAAWC,UACnCxK,EACAqB,OAKZ,EAAKC,UAAUC,KAAK2I,OAAOO,aACvB,CACIL,UAAW,EACXvK,OAAQ,CAAEwB,eAEd,SAACJ,EAAKoJ,GACF,IAAIpJ,EAAJ,CADY,IAKJ4F,EAAYwD,EAAMC,aAAlBzD,QACR,EAAKL,SAAS,CACVK,gBA5CY,E,sEAyYlB,IACExH,EAAYJ,KAAKC,MAAjBG,QADH,EAEwDJ,KAAKwB,MAA1DtB,EAFH,EAEGA,QAASuH,EAFZ,EAEYA,kBAAmBC,EAF/B,EAE+BA,qBAEpC,OAAKxH,EAKD,kBAAC,IAAD,CAAML,MAAM,UAAU4L,QAASzL,KAAK2I,gBAC/B3I,KAAKuK,iBACLvK,KAAKqJ,sBACN,kBAAC,EAAD,CACInJ,QAASA,EACTE,QAASA,EACTmD,QAASkE,EACT7F,QAAS5B,KAAKiH,iBAElB,kBAAC,EAAD,CACI/G,QAASA,EACTE,QAASA,EACTmD,QAASmE,EACT9F,QAAS5B,KAAKkH,qBAjBf,kBAAC,IAAD,S,gDA5ViBjH,GAAQ,IAC5B8K,EAA8B9K,EAA9B8K,MAD2B,EACG9K,EAAvBqC,YADoB,MACb,GADa,EACTlC,EAAYH,EAAZG,QACpBsL,EAAW/K,IAAEsB,OAAOK,EAAKqJ,YACzBzL,EAAUS,IAAEiL,KACdF,GACA,SAAAxL,GAAO,OAAIA,EAAQc,KAAK,KAAO+J,EAAMC,OAAOnF,MAGhD,IAAK3F,EACD,MAAO,GAGX,IAAMsK,EAAgBqB,YAAiBvJ,EAAKuJ,iBAAkB3L,GACxDuK,EAAc9J,IAAEmL,IAAI1L,EAAS,gBAC7B4G,EAAgB+E,YAAiBvB,EAAeC,GAChD5B,EAAclI,IAAEqL,QAAQxF,EAAOQ,GAC/B5E,EAAYlC,EAAQc,KAAK,GACzBb,EAAOQ,IAAEC,OACX0B,EAAKgJ,YACL,SAAAxK,GAAG,OAAIA,EAAIE,KAAK,KAAOoB,KAG3B,MAAO,CACHlC,UACAkC,YACAjC,OACAqK,gBACAC,cACAzD,gBACA6B,mB,GAhFUxH,IAAMC,WA2a5BwF,EAAQ5B,aAAe,CACnB5B,QAAS6B,IAAUC,QAaR7D,mCAAeuF,GAV9B,SAAyBtF,GAAQ,IACrBoH,EAAuCpH,EAAvCoH,SAAUvG,EAA6Bb,EAA7Ba,UAAWC,EAAkBd,EAAlBc,KAE7B,MAAO,CACHsG,WACAxI,QAJ2CoB,EAAZpB,QAK/BkC,KAAK,eAAMA,EAAP,GAAgBD,EAAUC,W,iCCjetC,sGAAO,IAAMkG,EAAgB,6CAChBhE,EAAiB,EACjB3B,EAAS,SAAG,GAAM2B,I,geCCvByH,E,OAAOvJ,EAAKC,MAAZsJ,GAEKxF,EAAM,MACNC,EAAS,SACTC,EAAQ,QACRC,EAAY,YACZC,EAAW,WACXmC,EAAY,YACZI,EAAU,UAEV8C,EAAc,CACvBzF,EACAC,EACAC,EACAC,EACAC,EACAmC,EACAI,GAGSyC,EAAmB,SAACM,EAAgBjM,GAC7C,OAAOS,IAAEiL,KACLO,GACA,SAAA3B,GAAa,OAAIA,EAAcxJ,KAAK,KAAOd,EAAQc,KAAK,OAInD+K,EAAmB,SAACvB,EAAeC,GAAiB,IAAD,EAQxD9J,IAAEmL,IAAItB,EAAe,QAAS,IAN9B4B,EAFwD,EAExDA,OACAC,EAHwD,EAGxDA,UACAC,EAJwD,EAIxDA,SACAC,EALwD,EAKxDA,aACAC,EANwD,EAMxDA,YACAC,EAPwD,EAOxDA,UAGJ,OAAIhC,EAAc9J,IAAE+L,SAASN,GAClB3F,EAGPgE,EAAc9J,IAAE+L,SAASL,GAClB3F,EAGP+D,EAAc9J,IAAE+L,SAASJ,GAClB3F,EAGP8D,EAAc9J,IAAE+L,SAASH,GAClB3F,GAGN6F,GAAahC,EAAc9J,IAAE+L,SAASF,GAChC3F,EAGP4F,EACOzD,EAGJI,GAGEzB,EAAa,SAACzH,EAASC,GAChC,IACI0H,EADED,EAAU,GAEZ+E,EAAiBzM,EAAQM,MAAMA,MAoBnC,OAnBAL,EAAKyM,KAAKC,GAEVlM,IAAEmM,QAAQ3M,GAAM,SAAAW,GAAQ,IACbC,EADY,YACFD,EAAIE,KADF,MAEXR,EAAUM,EAAIN,MAAdA,MAER,GAAImM,EAAiB,EAEjB,OADA9E,EAAW9G,GACJ,EAGX4L,GAAkBnM,EAClBoH,EAAQa,KAAK1H,MAGZ8G,IACDA,EAAWlH,IAAEoM,KAAKnF,IAGf,CAAEA,UAASC,aAGTa,EAAiB,SAACvI,EAAMyH,GACjC,IAAIoF,EAAS,IAAIf,EAAG,GAapB,OAXAtL,IAAEmM,QAAQ3M,GAAM,SAAAW,GAAQ,IACbC,EADY,YACFD,EAAIE,KADF,QAEKF,EAAIN,MAApBA,EAFW,EAEXA,MAAO0B,EAFI,EAEJA,KAEVvB,IAAEwI,SAASvB,EAAS7G,KAIzBiM,EAASA,EAAOC,IAAI,IAAIhB,EAAGzL,GAAO0M,KAAK,IAAM1H,SAAStD,IAAOiL,KAAK,UAG/DH,GAGLH,EAAa,SAACO,EAAMC,GAAU,IAAD,EACAD,EAAK5M,MAA5B8M,EADuB,EACvBA,MAAOC,EADgB,EAChBA,YADgB,EAEAF,EAAK7M,MAA5BgN,EAFuB,EAEvBA,MAAOC,EAFgB,EAEhBA,YAEf,OAAIH,IAAUE,EACHF,EAAQE,EAGZC,EAAcF","file":"static/js/5.0cba9ca7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Table } from 'antd';\n\nimport {\n    formatCurrencyValue,\n    formatCelrValue,\n    getUnitByAddress\n} from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Bidder',\n        dataIndex: 'bidder'\n    },\n    {\n        title: 'Rate',\n        dataIndex: 'rate'\n    },\n    {\n        title: 'Value',\n        dataIndex: 'value'\n    },\n    {\n        title: 'Celer value',\n        dataIndex: 'celerValue'\n    }\n];\n\nclass BidTable extends React.Component {\n    render() {\n        const { auction, bids, network } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n\n        const dataSource = _.filter(bids).map(bid => {\n            const bidder = bid.args[0];\n\n            return {\n                ...bid.value,\n                bidder,\n                value: formatCurrencyValue(bid.value.value, unit),\n                celerValue: formatCelrValue(bid.value.celerValue)\n            };\n        });\n\n        return (\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n            />\n        );\n    }\n}\n\nBidTable.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    LiBA: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {}\n\nexport default drizzleConnect(BidTable, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal, Alert } from 'antd';\n\nimport Form from '../form';\nimport {\n    currencyFieldOptions,\n    celerFieldOptions,\n    rateFieldOptions,\n    minValueRule,\n    maxValueRule\n} from '../../utils/form';\nimport { getUnitByAddress, formatCurrencyValue } from '../../utils/unit';\nimport { RATE_PRECISION, RATE_BASE } from '../../utils/constant';\n\nclass BidForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, passcode } = values;\n            const auctionId = auction.args[0];\n\n            this.contracts.LiBA.methods.placeBid.cacheSend(\n                auction.args[0],\n                web3.utils.soliditySha3(\n                    rate * RATE_BASE,\n                    web3.utils.toWei(value.toString(), 'ether'),\n                    web3.utils.toWei(celerValue.toString(), 'ether'),\n                    passcode\n                ),\n                web3.utils.toWei(celerValue.toString(), 'ether')\n            );\n\n            localStorage.setItem(\n                `auction-${this.contracts.LiBA.address}-${auctionId}`,\n                JSON.stringify(values)\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, visible, onClose } = this.props;\n        const { tokenAddress, maxRate, minValue } = auction.value;\n        const unit = getUnitByAddress(network.supportedTokens, tokenAddress);\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(formatCurrencyValue(minValue)),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                label: 'Daily Rate',\n                field: 'number',\n                fieldOptions: {\n                    ...rateFieldOptions,\n                    placeholder: 'The daily lending interest rate',\n                    step: 0.1,\n                    precision: RATE_PRECISION\n                },\n                rules: [\n                    minValueRule(0),\n                    maxValueRule(maxRate / RATE_BASE),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'CELR Value',\n                field: 'number',\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(network.minCELR),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'passcode',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'A random number used to hide your bid info'\n                },\n                rules: [\n                    minValueRule(10000),\n                    {\n                        message: 'Please enter a passcode!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Bid Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Alert\n                    type=\"warning\"\n                    message=\"Once the bid is placed, you have to reveal it, or you will lose staked CELR\"\n                    showIcon\n                />\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nBidForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nBidForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default BidForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport {\n    celerFieldOptions,\n    currencyFieldOptions,\n    rateFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress, formatCurrencyValue } from '../../utils/unit';\nimport { RATE_PRECISION, RATE_BASE } from '../../utils/constant';\n\nclass RevealForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, passcode, commitmentID } = values;\n            this.contracts.LiBA.methods.revealBid.cacheSend(\n                auction.args[0],\n                rate * RATE_BASE,\n                web3.utils.toWei(value.toString(), 'ether'),\n                web3.utils.toWei(celerValue.toString(), 'ether'),\n                passcode,\n                parseInt(commitmentID)\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, PoLC, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const commitmentOptions = _(PoLC.commitmentsByUser)\n            .filter(\n                commitment =>\n                    commitment.value.tokenAddress === auction.value.tokenAddress\n            )\n            .map(commitment => {\n                const id = commitment.args[1];\n                console.log(commitment);\n                const availableValue = formatCurrencyValue(\n                    commitment.value.availableValue,\n                    unit\n                );\n\n                return [id, `ID: ${id}, Available Value: ${availableValue}`];\n            })\n            .value();\n        const defaultValues = JSON.parse(\n            localStorage.getItem(\n                `auction-${this.contracts.LiBA.address}-${auction.args[0]}`\n            ) || '{}'\n        );\n\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                initialValue: defaultValues.value,\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                label: 'Daily Rate',\n                field: 'number',\n                initialValue: defaultValues.rate,\n                fieldOptions: {\n                    ...rateFieldOptions,\n                    step: 0.1,\n                    precision: RATE_PRECISION,\n                    placeholder: 'The daily lending interest rate'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'Celer Value',\n                field: 'number',\n                initialValue: defaultValues.celerValue,\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'passcode',\n                field: 'number',\n                initialValue: defaultValues.passcode,\n                fieldOptions: {\n                    placeholder: 'The random number entered for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a passcode!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'commitmentID',\n                field: 'select',\n                fieldOptions: {\n                    options: commitmentOptions,\n                    placeholder: 'The commitment in PoLC used for lending'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a commitmentID!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Reveal Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nRevealForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nRevealForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { contracts } = state;\n\n    return {\n        PoLC: contracts.PoLC\n    };\n}\n\nexport default drizzleConnect(RevealForm, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport {\n    Alert,\n    Button,\n    Card,\n    Steps,\n    Skeleton,\n    Statistic,\n    Tabs,\n    List,\n    Row,\n    Col,\n    Divider,\n    Result,\n    notification\n} from 'antd';\n\nimport BidTable from '../components/auction/bid-table';\nimport BidForm from '../components/auction/bid-form';\nimport RevealForm from '../components/auction/reveal-form';\nimport { formatCurrencyValue, getUnitByAddress } from '../utils/unit';\nimport {\n    getAuctionPeriod,\n    getCurrentPeriod,\n    getWinners,\n    calculateRepay,\n    BID,\n    REVEAL,\n    CLAIM,\n    CHALLENGE,\n    FINALIZE,\n    EXPIRED,\n    FINALIZED\n} from '../utils/liba';\nimport { EMPTY_ADDRESS, RATE_BASE } from '../utils/constant';\nimport { blockFieldOptions } from '../utils/form';\n\nconst { Step } = Steps;\n\nconst steps = [BID, REVEAL, CLAIM, CHALLENGE, FINALIZE];\n\nclass Auction extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.contracts = context.drizzle.contracts;\n        this.state = {\n            auction: null,\n            currentStep: 0,\n            currentPeriod: '',\n            isBidModalVisible: false,\n            isRevealModalVisible: false\n        };\n\n        const auctionId = parseInt(props.match.params.id);\n\n        this.contracts.LiBA.events.RevealBid(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { auctionId, bidder } = event.returnValues;\n                this.contracts.LiBA.methods.bidsByUser.cacheCall(\n                    bidder,\n                    auctionId\n                );\n            }\n        );\n\n        this.contracts.LiBA.events.ClaimWinners(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { winners } = event.returnValues;\n                this.setState({\n                    winners\n                });\n            }\n        );\n    }\n\n    static getDerivedStateFromProps(props) {\n        const { match, LiBA = {}, network } = props;\n        const auctions = _.values(LiBA.getAuction);\n        const auction = _.find(\n            auctions,\n            auction => auction.args[0] === match.params.id\n        );\n\n        if (!auction) {\n            return {};\n        }\n\n        const auctionPeriod = getAuctionPeriod(LiBA.getAuctionPeriod, auction);\n        const blockNumber = _.get(network, 'block.number');\n        const currentPeriod = getCurrentPeriod(auctionPeriod, blockNumber);\n        const currentStep = _.indexOf(steps, currentPeriod);\n        const auctionId = auction.args[0];\n        const bids = _.filter(\n            LiBA.bidsByUser,\n            bid => bid.args[1] === auctionId\n        );\n\n        return {\n            auction,\n            auctionId,\n            bids,\n            auctionPeriod,\n            blockNumber,\n            currentPeriod,\n            currentStep\n        };\n    }\n\n    takeAction = () => {\n        const { currentPeriod } = this.state;\n\n        switch (currentPeriod) {\n            case BID:\n                return this.toggleBidModal();\n            case REVEAL:\n                return this.toggleRevealModal();\n            case CLAIM:\n                return this.claimWinners();\n            case CHALLENGE:\n                return this.challengeWinners();\n            case FINALIZE:\n                return this.finalizeAuction();\n            default:\n                console.error('invalid period');\n        }\n    };\n\n    toggleBidModal = () => {\n        this.setState(prevState => ({\n            isBidModalVisible: !prevState.isBidModalVisible\n        }));\n    };\n\n    toggleRevealModal = () => {\n        this.setState(prevState => ({\n            isRevealModalVisible: !prevState.isRevealModalVisible\n        }));\n    };\n\n    claimWinners = () => {\n        const { auctionId } = this.state;\n        const { winners, topLoser } = this.getWinners();\n\n        this.contracts.LiBA.methods\n            .claimWinners(auctionId, winners, topLoser)\n            .send();\n    };\n\n    challengeWinners = () => {\n        const { auctionId, winners } = this.state;\n        const { winners: calculatedWinners, topLoser } = this.getWinners();\n\n        if (_.isEqual(winners, calculatedWinners)) {\n            notification.error({\n                message: 'There is no need to challenge winners'\n            });\n            return;\n        }\n\n        const challenger = _.difference(calculatedWinners, winners)[0];\n\n        this.contracts.LiBA.methods\n            .challengeWinners(\n                auctionId,\n                challenger,\n                calculatedWinners,\n                topLoser\n            )\n            .send();\n    };\n\n    finalizeAuction = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeAuction.cacheSend(auctionId);\n    };\n\n    finalizeBid = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeBid.cacheSend(auctionId);\n    };\n\n    collectCollateral = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.collectCollateral.cacheSend(auctionId);\n    };\n\n    repayAuction = () => {\n        const { auctionId, auction, bids, winners } = this.state;\n        const { tokenAddress } = auction.value;\n        const sendArgs = [auctionId];\n        if (tokenAddress === EMPTY_ADDRESS) {\n            sendArgs.push({\n                value: calculateRepay(bids, winners).toString()\n            });\n        }\n\n        this.contracts.LiBA.methods.repayAuction.cacheSend(...sendArgs);\n    };\n\n    getWinners = () => {\n        const { auction, bids } = this.state;\n        return getWinners(auction, bids);\n    };\n\n    renderAction = () => {\n        const { accounts } = this.props;\n        const { auction, currentPeriod, currentStep, winners } = this.state;\n        const currentAccount = accounts[0];\n        const isAsker = currentAccount === auction.value.asker;\n\n        if (isAsker) {\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button block type=\"primary\" onClick={this.repayAuction}>\n                        Repay\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([CLAIM, FINALIZE], currentPeriod)) {\n                return [];\n            }\n        } else {\n            if (\n                currentPeriod === EXPIRED ||\n                (currentStep === -1 && !_.includes(winners, currentAccount))\n            ) {\n                return [\n                    <Button block type=\"primary\" onClick={this.finalizeBid}>\n                        Withdraw bid\n                    </Button>\n                ];\n            }\n\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button\n                        block\n                        type=\"primary\"\n                        onClick={this.collectCollateral}\n                    >\n                        Collect collateral\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([BID, REVEAL, CHALLENGE], currentPeriod)) {\n                return [];\n            }\n        }\n\n        return [\n            <Button block type=\"primary\" onClick={this.takeAction}>\n                {currentPeriod}\n            </Button>\n        ];\n    };\n\n    renderAuctionDetail = () => {\n        const { network } = this.props;\n        const { auction, bids, winners } = this.state;\n        const {\n            asker,\n            tokenAddress,\n            collateralAddress,\n            collateralValue,\n            value,\n            duration,\n            maxRate,\n            minValue\n        } = auction.value;\n        const unit = getUnitByAddress(network.supportedTokens, tokenAddress);\n        const defaultValues = JSON.parse(\n            localStorage.getItem(\n                `auction-${this.contracts.LiBA.address}-${auction.args[0]}`\n            ) || '{}'\n        );\n        let ownBidResult;\n\n        if (_.isEmpty(defaultValues)) {\n            ownBidResult = (\n                <Result status=\"warning\" title=\"You have not placed bid yet\" />\n            );\n        } else {\n            ownBidResult = (\n                <Row>\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Value\"\n                            value={`${defaultValues.value}  ${unit}`}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Daily Rate\"\n                            value={`${defaultValues.rate} %`}\n                        />\n                    </Col>{' '}\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Celer Value\"\n                            value={`${defaultValues.celerValue} CELR`}\n                        />\n                    </Col>{' '}\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Passcode\"\n                            value={defaultValues.passcode}\n                        />\n                    </Col>\n                </Row>\n            );\n        }\n\n        return (\n            <Row style={{ marginTop: '10px' }}>\n                <Col span={24}>\n                    <Statistic title=\"Asker\" value={asker} />\n                </Col>\n                <Col span={24}>\n                    <Statistic title=\"Token Address\" value={tokenAddress} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Value\"\n                        value={formatCurrencyValue(value, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Duration\" value={`${duration} Day`} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Min Value\"\n                        value={formatCurrencyValue(minValue, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Max Daily Rate\"\n                        value={`${maxRate / RATE_BASE} %`}\n                    />\n                </Col>\n                {collateralValue > 0 && (\n                    <>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Address\"\n                                value={collateralAddress}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Value\"\n                                value={collateralValue}\n                            />\n                        </Col>\n                    </>\n                )}\n\n                <Col span={24}>\n                    <Tabs>\n                        <Tabs.TabPane tab=\"Your Bid\" key=\"own\">\n                            {ownBidResult}\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Bids\" key=\"bids\">\n                            <BidTable\n                                auction={auction}\n                                bids={bids}\n                                network={network}\n                            />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Winners\" key=\"winners\">\n                            <List\n                                size=\"small\"\n                                bordered\n                                dataSource={winners}\n                                renderItem={winner => (\n                                    <List.Item>{winner}</List.Item>\n                                )}\n                            />\n                        </Tabs.TabPane>\n                    </Tabs>\n                </Col>\n            </Row>\n        );\n    };\n\n    renderProgress = () => {\n        const {\n            auctionPeriod,\n            blockNumber,\n            currentPeriod,\n            currentStep\n        } = this.state;\n\n        if (currentStep === -1) {\n            return <Alert type=\"warning\" message={currentPeriod} showIcon />;\n        }\n\n        const action = currentPeriod.toLowerCase();\n        const blockLeft = auctionPeriod.value[action + 'End'] - blockNumber;\n\n        return (\n            <>\n                <Steps size=\"small\" current={currentStep}>\n                    {_.map(steps, step => (\n                        <Step key={step} title={step} />\n                    ))}\n                </Steps>\n\n                <Divider>\n                    {blockFieldOptions.formatter(blockLeft)} left to {action}\n                </Divider>\n            </>\n        );\n    };\n\n    render() {\n        const { network } = this.props;\n        const { auction, isBidModalVisible, isRevealModalVisible } = this.state;\n\n        if (!auction) {\n            return <Skeleton />;\n        }\n\n        return (\n            <Card title=\"Auction\" actions={this.renderAction()}>\n                {this.renderProgress()}\n                {this.renderAuctionDetail()}\n                <BidForm\n                    auction={auction}\n                    network={network}\n                    visible={isBidModalVisible}\n                    onClose={this.toggleBidModal}\n                />\n                <RevealForm\n                    auction={auction}\n                    network={network}\n                    visible={isRevealModalVisible}\n                    onClose={this.toggleRevealModal}\n                />\n            </Card>\n        );\n    }\n}\n\nAuction.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nAuction.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts, contracts, LiBA, network } = state;\n\n    return {\n        accounts,\n        network,\n        LiBA: { ...LiBA, ...contracts.LiBA }\n    };\n}\n\nexport default drizzleConnect(Auction, mapStateToProps);\n","export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const RATE_PRECISION = 1;\nexport const RATE_BASE = 10 ** RATE_PRECISION;\n","import _ from 'lodash';\nimport web3 from 'web3';\n\nconst { BN } = web3.utils;\n\nexport const BID = 'Bid';\nexport const REVEAL = 'Reveal';\nexport const CLAIM = 'Claim';\nexport const CHALLENGE = 'Challenge';\nexport const FINALIZE = 'Finalize';\nexport const FINALIZED = 'Finalized';\nexport const EXPIRED = 'Expired';\nexport const UNKNOWN = 'Unknown';\nexport const ALL_PERIODS = [\n    BID,\n    REVEAL,\n    CLAIM,\n    CHALLENGE,\n    FINALIZE,\n    FINALIZED,\n    EXPIRED\n];\n\nexport const getAuctionPeriod = (auctionPeriods, auction) => {\n    return _.find(\n        auctionPeriods,\n        auctionPeriod => auctionPeriod.args[0] === auction.args[0]\n    );\n};\n\nexport const getCurrentPeriod = (auctionPeriod, blockNumber) => {\n    const {\n        bidEnd,\n        revealEnd,\n        claimEnd,\n        challengeEnd,\n        finalizeEnd,\n        finalized\n    } = _.get(auctionPeriod, 'value', {});\n\n    if (blockNumber < _.toNumber(bidEnd)) {\n        return BID;\n    }\n\n    if (blockNumber < _.toNumber(revealEnd)) {\n        return REVEAL;\n    }\n\n    if (blockNumber < _.toNumber(claimEnd)) {\n        return CLAIM;\n    }\n\n    if (blockNumber < _.toNumber(challengeEnd)) {\n        return CHALLENGE;\n    }\n\n    if (!finalized && blockNumber < _.toNumber(finalizeEnd)) {\n        return FINALIZE;\n    }\n\n    if (finalized) {\n        return FINALIZED;\n    }\n\n    return EXPIRED;\n};\n\nexport const getWinners = (auction, bids) => {\n    const winners = [];\n    let topLoser;\n    let remainingValue = auction.value.value;\n    bids.sort(compareBid);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value } = bid.value;\n\n        if (remainingValue < 0) {\n            topLoser = bidder;\n            return false;\n        }\n\n        remainingValue -= value;\n        winners.push(bidder);\n    });\n\n    if (!topLoser) {\n        topLoser = _.last(winners);\n    }\n\n    return { winners, topLoser };\n};\n\nexport const calculateRepay = (bids, winners) => {\n    let result = new BN(0);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value, rate } = bid.value;\n\n        if (!_.includes(winners, bidder)) {\n            return;\n        }\n\n        result = result.add(new BN(value).muln(100 + parseInt(rate)).divn(100));\n    });\n\n    return result;\n};\n\nconst compareBid = (bid1, bid2) => {\n    const { rate1, celerValue1 } = bid1.value;\n    const { rate2, celerValue2 } = bid2.value;\n\n    if (rate1 !== rate2) {\n        return rate1 - rate2;\n    }\n\n    return celerValue2 - celerValue1;\n};\n"],"sourceRoot":""}