{"version":3,"sources":["utils/contracts.js","utils/unit.js","utils/form.js","components/form.js","components/select.js","utils/network.js","components/approve-celr.js","components/account-info.js","utils/subscribe.js","App.js","router.js","models/polc.js","models/liba.js","models/network.js","index.js"],"names":["contractOptions","web3","block","fallback","type","url","contracts","PoLC","LiBA","CELRToken","DAIToken","polls","accounts","blocks","getUnitByAddress","supportedTokens","address","token","_","find","supportedToken","symbol","formatCurrencyValue","value","unit","toNumber","utils","fromWei","formatCelrValue","currencyFieldOptions","formatter","parser","replace","celerFieldOptions","dayFieldOptions","blockFieldOptions","timeEstimate","formatDistanceToNow","Date","now","rateFieldOptions","minValueRule","minValue","validator","rule","callback","maxValueRule","maxValue","FormItem","Form","Item","buttonLayout","wrapperCol","sm","span","offset","xs","FIELD_MAP","date","DatePicker","input","Input","number","InputNumber","text","TextArea","select","Select","CustomizeForm","handleSubmit","e","props","form","onSubmit","preventDefault","validateFields","err","values","renderFormItems","formItemLayout","items","getFieldDecorator","map","item","field","fieldOptions","initialValue","label","name","rules","Field","decoratorOptions","getValueFromEvent","args","fileList","target","checked","key","capitalize","this","submitText","noop","htmlType","React","Component","defaultProps","labelCol","create","onValuesChange","changedValues","Option","allowClear","disabled","optionFilterProp","placeholder","state","undefined","onChange","setState","getValue","defaultValue","renderOptions","options","omit","isNil","showSearch","CELR","DAI","networkConfigs","minCELR","localNetworkConfig","getNetworkConfig","networkID","checkNetworkCompatbility","networkVersion","window","currentProvider","Modal","error","title","content","ApproveCelrForm","context","handleValueChange","changedValue","onClose","current","contract","tokenInstance","getTokenInstance","methods","approve","toWei","toString","send","console","createRef","drizzle","visible","formItems","get","message","required","onOk","onCancel","ref","contextTypes","PropTypes","object","drizzleConnect","network","AccountInfo","celrValue","className","getCelrAllowance","account","allowance","cacheCall","Sider","Layout","Content","Footer","App","toggleModal","prevState","isModalVisible","dispatch","events","NewCommitment","fromBlock","filter","user","event","returnValues","commitmentId","commitmentsByUser","NewAuction","auctionId","getAuction","getAuctionPeriod","NewBid","bidder","payload","Approval","owner","spender","subscribeEvent","blockNumber","selectedAddress","setInterval","location","reload","eth","getBlock","then","subscribeChainInfo","children","pathname","celerAllowance","theme","mode","selectedKeys","slice","to","onClick","style","textAlign","withRouter","ConnectedRouter","routerRedux","LoadingWrapper","LoadingContainer","redirectToHome","RouterConfig","history","app","Dynamic","component","Auction","store","_store","loadingComp","Spin","exact","path","render","namespace","effects","reducers","save","action","addBid","bids","rootSaga","all","drizzleSagas","saga","fork","dva","initialState","generateContractsInitialState","extraReducers","drizzleReducers","onError","resp","msg","srv","use","createLoading","model","PoLCModel","LiBAModel","NetworkModel","router","require","default","start","runSaga"],"mappings":"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","file":"static/js/main.549e5374.chunk.js","sourcesContent":["import PoLC from './../contracts/PoLC.json';\nimport LiBA from './../contracts/LiBA.json';\nimport CELRToken from './../contracts/CELRToken.json';\nimport DAIToken from './../contracts/DAIToken.json';\n\n// let drizzle know what contracts we want\nconst contractOptions = {\n    web3: {\n        block: false,\n        fallback: {\n            type: 'ws',\n            url: 'ws://localhost:8545'\n        }\n    },\n    contracts: [PoLC, LiBA, CELRToken, DAIToken],\n    polls: {\n        accounts: 1000,\n        blocks: 1000\n    }\n};\n\nexport default contractOptions;\n","import _ from 'lodash';\nimport web3 from 'web3';\n\nimport './network';\n\nexport const getUnitByAddress = (supportedTokens, address) => {\n    const token = _.find(\n        supportedTokens,\n        supportedToken => supportedToken.address === address\n    );\n\n    if (!token) {\n        return '';\n    }\n    return token.symbol;\n};\n\nexport const formatCurrencyValue = (value, unit) => {\n    if (!value) {\n        return;\n    }\n\n    const num = _.toNumber(value);\n\n    if (num < 100000) {\n        return `${value} wei`;\n    }\n\n    if (unit) {\n        return `${web3.utils.fromWei(value)} ${unit}`;\n    } else {\n        return web3.utils.fromWei(value);\n    }\n};\n\nexport const formatCelrValue = value => {\n    return formatCurrencyValue(value, 'CELR');\n};\n","import formatDistanceToNow from 'date-fns/formatDistanceToNow';\n\nconst BLOCK_INTERVAL = 15000;\n\nexport const currencyFieldOptions = unit => ({\n    formatter: value => (value ? `${value}${unit}` : ''),\n    parser: value => value.replace(/[\\D]/g, '')\n});\n\nexport const celerFieldOptions = currencyFieldOptions('CELR');\n\nexport const dayFieldOptions = {\n    formatter: value => (value ? `${value}day` : ''),\n    parser: value => value.replace(/[\\D]/g, '')\n};\n\nexport const blockFieldOptions = {\n    formatter: value => {\n        if (!value) {\n            return '';\n        }\n\n        const timeEstimate = formatDistanceToNow(\n            new Date(Date.now() + value * BLOCK_INTERVAL)\n        );\n\n        return `${value}blocks(${timeEstimate})`;\n    },\n    parser: value => value.replace(/\\([\\w\\s]+\\)?/, '').replace(/[\\D]/g, '')\n};\n\nexport const rateFieldOptions = {\n    formatter: value => (value ? `${value}%` : ''),\n    parser: value => value.replace(/[^\\d.]/g, '')\n};\n\nexport const minValueRule = minValue => ({\n    validator: (rule, value, callback) => {\n        if (value < minValue) {\n            const msg = `value is smaller than ${minValue}`;\n            callback(msg);\n        }\n\n        callback();\n    }\n});\n\nexport const maxValueRule = maxValue => ({\n    validator: (rule, value, callback) => {\n        if (value > maxValue) {\n            const msg = `value is larger than ${maxValue}`;\n            callback(msg);\n        }\n\n        callback();\n    }\n});\n","import React from 'react';\nimport _ from 'lodash';\nimport { Button, DatePicker, Form, Input, InputNumber } from 'antd';\n\nimport Select from './select';\n\nconst FormItem = Form.Item;\n\nconst defaultFormItemLayout = {\n    labelCol: {\n        sm: { span: 8 },\n        xs: { span: 24 }\n    },\n\n    wrapperCol: {\n        sm: { span: 16 },\n        xs: { span: 24 }\n    }\n};\n\nconst buttonLayout = {\n    wrapperCol: {\n        sm: { span: 3, offset: 21 },\n        xs: { span: 24 }\n    }\n};\n\nconst FIELD_MAP = {\n    date: DatePicker,\n    input: Input,\n    number: InputNumber,\n    text: Input.TextArea,\n    select: Select\n};\n\nclass CustomizeForm extends React.Component {\n    handleSubmit = e => {\n        const { form, onSubmit } = this.props;\n        e.preventDefault();\n        form.validateFields((err, values) => {\n            if (!err) {\n                onSubmit(values);\n            }\n        });\n    };\n\n    renderFormItems = () => {\n        const { form, formItemLayout, items } = this.props;\n        const { getFieldDecorator } = form;\n\n        return _.map(items, item => {\n            const {\n                field = 'input',\n                fieldOptions,\n                initialValue,\n                label,\n                name,\n                rules\n            } = item;\n            const Field = FIELD_MAP[field];\n            const decoratorOptions = {\n                initialValue,\n                rules,\n                getValueFromEvent(...args) {\n                    if (field === 'file') {\n                        return args[0].fileList;\n                    }\n\n                    const [e] = args;\n                    if (!e || !e.target) {\n                        return e;\n                    }\n\n                    const { target } = e;\n                    return target.type === 'checkbox'\n                        ? target.checked\n                        : target.value;\n                }\n            };\n\n            return (\n                <FormItem\n                    key={name}\n                    {...formItemLayout}\n                    label={!label ? _.capitalize(name) : label}\n                >\n                    {getFieldDecorator(\n                        name,\n                        decoratorOptions\n                    )(<Field {...fieldOptions} />)}\n                </FormItem>\n            );\n        });\n    };\n\n    render() {\n        const { onSubmit, submitText } = this.props;\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                {this.renderFormItems()}\n                {onSubmit !== _.noop && (\n                    <FormItem {...buttonLayout}>\n                        <Button htmlType=\"submit\" type=\"primary\">\n                            {submitText}\n                        </Button>\n                    </FormItem>\n                )}\n            </Form>\n        );\n    }\n}\n\nCustomizeForm.defaultProps = {\n    formItemLayout: defaultFormItemLayout,\n    onSubmit: _.noop,\n    submitText: 'Save'\n};\n\nexport default Form.create({\n    onValuesChange(props, changedValues) {\n        if (props.onValuesChange) {\n            props.onValuesChange(changedValues);\n        }\n    }\n})(CustomizeForm);\n","import React from 'react';\nimport { Select } from 'antd';\nimport _ from 'lodash';\n\nconst Option = Select.Option;\n\nexport default class extends React.Component {\n    defaultProps = {\n        allowClear: true,\n        disabled: false,\n        optionFilterProp: 'children',\n        placeholder: ''\n    };\n\n    state = { value: undefined };\n\n    onChange = (value: ValueType) => this.setState({ value });\n\n    getValue = () => {\n        const { defaultValue } = this.props;\n        const { value } = this.state;\n        return value || defaultValue;\n    };\n\n    renderOptions = () => {\n        const { options } = this.props;\n        return _.map(options, ([value, text]) => (\n            <Option key={value} value={value}>\n                {text}\n            </Option>\n        ));\n    };\n\n    render() {\n        const { defaultValue } = this.props;\n        const props = {\n            ..._.omit(this.props, ['options', 'defaultValue'])\n        };\n\n        if (!props.onChange) {\n            props.onChange = this.onChange;\n        }\n        if (!_.isNil(defaultValue)) {\n            props.defaultValue = defaultValue;\n        }\n\n        return (\n            <Select {...props} showSearch={true}>\n                {this.renderOptions()}\n            </Select>\n        );\n    }\n}\n","import { Modal } from 'antd';\n\n// network\nconst MAINNET = '1';\nconst ROPSTEN = '3';\n\n// token\nexport const CELR = 'CELR';\nexport const DAI = 'DAI';\n\nconst ethToken = {\n    symbol: 'ETH',\n    address: '0x0000000000000000000000000000000000000000'\n};\n\nconst networkConfigs = {\n    [ROPSTEN]: {\n        supportedTokens: [\n            // ethToken,\n            {\n                symbol: DAI,\n                address: '0x6a3a9a07a0d687b73322d2F66FB42cC473162a0B'\n            }\n        ],\n        minCELR: 500\n    }\n};\n\nconst localNetworkConfig = {\n    supportedTokens: [\n        ethToken,\n        {\n            symbol: CELR,\n            address: '0x992E7b56FbF1082a71A49bA9c3FdeAE624545C1b'\n        }\n    ],\n    minCELR: 500\n};\n\nexport const getNetworkConfig = networkID => {\n    if (networkConfigs[networkID]) {\n        return networkConfigs[networkID];\n    }\n\n    return localNetworkConfig;\n};\n\nexport const checkNetworkCompatbility = () => {\n    if (process.env.NODE_ENV === 'development') {\n        return;\n    }\n\n    const networkVersion = window.web3.currentProvider.networkVersion;\n    if (networkVersion !== MAINNET && networkVersion !== ROPSTEN) {\n        Modal.error({\n            title: 'Current network is not supported',\n            content: 'Please switch to mainnet or ropsten'\n        });\n    }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Modal } from 'antd';\n\nimport Form from './form';\nimport { currencyFieldOptions } from '../utils/form';\nimport { CELR, DAI } from '../utils/network';\n\nclass ApproveCelrForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = {};\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    handleValueChange = changedValue => this.setState(changedValue);\n\n    onSubmit = () => {\n        const { onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { token, contract, value } = values;\n            const tokenInstance = this.getTokenInstance(token);\n            if (!tokenInstance) {\n                console.error('invalid token type');\n                return;\n            }\n\n            tokenInstance.methods\n                .approve(contract, web3.utils.toWei(value.toString(), 'ether'))\n                .send();\n\n            onClose();\n        });\n    };\n\n    getTokenInstance = token => {\n        switch (token) {\n            case CELR:\n                return this.contracts.CELRToken;\n            case DAI:\n                return this.contracts.DAIToken;\n        }\n    };\n\n    render() {\n        const { visible, onClose } = this.props;\n        const { CELRToken, DAIToken, PoLC, LiBA } = this.contracts;\n        const tokenOptions = [\n            [CELR, `CELR (${_.get(CELRToken, 'address')})`],\n            [DAI, `DAI (${_.get(DAIToken, 'address')})`]\n        ];\n        const contractOptions = [\n            [_.get(PoLC, 'address'), `PoLC (${_.get(PoLC, 'address')})`],\n            [_.get(LiBA, 'address'), `LiBA (${_.get(LiBA, 'address')})`]\n        ];\n        const formItems = [\n            {\n                name: 'token',\n                field: 'select',\n                fieldOptions: {\n                    options: tokenOptions,\n                    placeholder: 'The token for approve'\n                },\n                rules: [\n                    {\n                        message: 'Please select a token!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'contract',\n                field: 'select',\n                fieldOptions: {\n                    options: contractOptions,\n                    placeholder: 'The contract to be approved'\n                },\n                rules: [\n                    {\n                        message: 'Please select a contract!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(this.state.token),\n                    placeholder: 'The amount of token allowance'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Approve Token\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form\n                    ref={this.form}\n                    items={formItems}\n                    onValuesChange={this.handleValueChange}\n                />\n            </Modal>\n        );\n    }\n}\n\nApproveCelrForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nApproveCelrForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { network } = state;\n\n    return {\n        network\n    };\n}\n\nexport default drizzleConnect(ApproveCelrForm, mapStateToProps);\n","import React from 'react';\nimport { Card, Statistic } from 'antd';\n\nimport { formatCelrValue } from '../utils/unit';\n\nfunction AccountInfo(props) {\n    const { celrValue } = props;\n\n    return (\n        <Card className=\"account-info\" title=\"Account info\">\n            <Statistic\n                title=\"CELR allowance for LiBA\"\n                value={formatCelrValue(celrValue)}\n            />\n        </Card>\n    );\n}\n\nexport default AccountInfo;\n","const POLL_INTERVAL = 1000;\n\nexport const subscribeEvent = (account, contracts, dispatch) => {\n    const { PoLC, LiBA, CELRToken } = contracts;\n\n    PoLC.events.NewCommitment(\n        {\n            fromBlock: 0,\n            filter: {\n                user: account\n            }\n        },\n        (err, event) => {\n            if (err) {\n                return;\n            }\n\n            const { commitmentId, user } = event.returnValues;\n            PoLC.methods.commitmentsByUser.cacheCall(user, commitmentId);\n        }\n    );\n\n    LiBA.events.NewAuction(\n        {\n            fromBlock: 0\n        },\n        (err, event) => {\n            if (err) {\n                return;\n            }\n\n            const { auctionId } = event.returnValues;\n            LiBA.methods.getAuction.cacheCall(auctionId);\n            LiBA.methods.getAuctionPeriod.cacheCall(auctionId);\n        }\n    );\n\n    LiBA.events.NewBid(\n        {\n            fromBlock: 0,\n            filter: {\n                bidder: account\n            }\n        },\n        (err, event) => {\n            if (err) {\n                return;\n            }\n\n            const { auctionId } = event.returnValues;\n            dispatch({\n                type: 'LiBA/addBid',\n                payload: { auctionId }\n            });\n        }\n    );\n\n    CELRToken.events.Approval(\n        {\n            filter: {\n                owner: account,\n                spender: LiBA.address\n            }\n        },\n        (err, event) => {\n            if (err) {\n                return;\n            }\n\n            getCelrAllowance(account, contracts);\n        }\n    );\n\n    getCelrAllowance(account, contracts);\n};\n\nexport const subscribeChainInfo = (web3, dispatch) => {\n    const account = web3.currentProvider.selectedAddress;\n    let blockNumber;\n\n    setInterval(() => {\n        if (account !== web3.currentProvider.selectedAddress) {\n            window.location.reload();\n        }\n\n        return web3.eth.getBlock('latest').then(block => {\n            if (block && blockNumber !== block.number) {\n                dispatch({\n                    type: 'network/save',\n                    payload: { block }\n                });\n                blockNumber = block.number;\n            }\n        });\n    }, POLL_INTERVAL);\n};\n\nconst getCelrAllowance = (account, contracts) => {\n    const { CELRToken, LiBA } = contracts;\n    CELRToken.methods.allowance.cacheCall(account, LiBA.address);\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { withRouter, Link } from 'dva/router';\nimport { Layout, Menu, Button } from 'antd';\n\nimport ApproveCELRForm from './components/approve-celr';\nimport AccountInfo from './components/account-info';\nimport { subscribeEvent, subscribeChainInfo } from './utils/subscribe';\nimport { getNetworkConfig } from './utils/network';\n\nimport './App.css';\n\nconst { Sider, Content, Footer } = Layout;\n\nclass App extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = { isModalVisible: false };\n        this.contracts = context.drizzle.contracts;\n        this.web3 = context.drizzle.web3;\n    }\n\n    componentWillMount() {\n        const { accounts, dispatch } = this.props;\n        subscribeEvent(accounts[0], this.contracts, dispatch);\n        subscribeChainInfo(this.web3, dispatch);\n\n        dispatch({\n            type: 'network/save',\n            payload: getNetworkConfig(this.web3.currentProvider.networkVersion)\n        });\n    }\n\n    toggleModal = () => {\n        this.setState(prevState => ({\n            isModalVisible: !prevState.isModalVisible\n        }));\n    };\n\n    render() {\n        const { isModalVisible } = this.state;\n        const { children, location, CELRToken } = this.props;\n        const { pathname } = location;\n        const celerAllowance = _.values(CELRToken.allowance)[0] || {};\n\n        return (\n            <Layout>\n                <Sider>\n                    <AccountInfo celrValue={celerAllowance.value} />\n                    <Menu\n                        theme=\"dark\"\n                        mode=\"inline\"\n                        selectedKeys={[pathname.slice(1)]}\n                    >\n                        <Menu.Item key=\"polc\">\n                            <Link to=\"/polc\">Fund</Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"liba\">\n                            <Link to=\"/liba\">Auctions</Link>\n                        </Menu.Item>\n                        <Menu.Item className=\"approve-celr\">\n                            <Button\n                                type=\"primary\"\n                                block\n                                onClick={this.toggleModal}\n                            >\n                                Approve Token\n                            </Button>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Content>\n                        {children}\n                        <ApproveCELRForm\n                            visible={isModalVisible}\n                            onClose={this.toggleModal}\n                        />\n                    </Content>\n                    <Footer style={{ textAlign: 'center' }}>\n                        cEconomy ©2019 Created by Celer Network\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\nApp.propTypes = {\n    children: PropTypes.element.isRequired,\n    location: PropTypes.object.isRequired\n};\n\nApp.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts, contracts } = state;\n\n    return {\n        accounts,\n        CELRToken: contracts.CELRToken\n    };\n}\n\nexport default withRouter(drizzleConnect(App, mapStateToProps));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, routerRedux, Switch, Route, Redirect } from 'dva/router';\nimport Dynamic from 'dva/dynamic';\nimport { DrizzleProvider } from 'drizzle-react';\nimport { LoadingContainer } from 'drizzle-react-components';\nimport { Spin } from 'antd';\n\nimport App from './App';\nimport contractOptions from './utils/contracts';\n\nconst { ConnectedRouter } = routerRedux;\nconst LoadingWrapper = withRouter(LoadingContainer);\n\nconst redirectToHome = () => <Redirect to=\"/polc\" />;\n\nfunction RouterConfig({ history, app }) {\n    const PoLC = Dynamic({\n        app,\n        component: () => import('./routes/polc')\n    });\n    const LiBA = Dynamic({\n        app,\n        component: () => import('./routes/liba')\n    });\n    const Auction = Dynamic({\n        app,\n        component: () => import('./routes/auction')\n    });\n\n    return (\n        <DrizzleProvider options={contractOptions} store={app._store}>\n            <ConnectedRouter history={history}>\n                <LoadingWrapper loadingComp={Spin}>\n                    <App>\n                        <Switch>\n                            <Route exact path=\"/polc\" component={PoLC} />\n                            <Route exact path=\"/liba\" component={LiBA} />\n                            <Route\n                                exact\n                                path=\"/auction/:id\"\n                                component={Auction}\n                            />\n                            <Route exact path=\"/\" render={redirectToHome} />\n                        </Switch>\n                    </App>\n                </LoadingWrapper>\n            </ConnectedRouter>\n        </DrizzleProvider>\n    );\n}\n\nRouterConfig.propTypes = {\n    history: PropTypes.object.isRequired\n};\n\nexport default RouterConfig;\n","export default {\n    namespace: 'PoLC',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'LiBA',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        addBid(state, action) {\n            return {\n                ...state,\n                bids: [...(state.bids || []), action.payload.auctionId]\n            };\n        },\n\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","export default {\n    namespace: 'network',\n\n    state: {},\n\n    effects: {},\n\n    reducers: {\n        save(state, action) {\n            return { ...state, ...action.payload };\n        }\n    }\n};\n","import dva from 'dva';\nimport createLoading from 'dva-loading';\nimport { all, fork } from 'redux-saga/effects';\nimport {\n    generateContractsInitialState,\n    drizzleReducers,\n    drizzleSagas\n} from 'drizzle';\nimport { message } from 'antd';\n\nimport contractOptions from './utils/contracts';\nimport { checkNetworkCompatbility } from './utils/network';\nimport PoLCModel from './models/polc';\nimport LiBAModel from './models/liba';\nimport NetworkModel from './models/network';\n\nfunction*rootSaga() {\n    yield all(drizzleSagas.map(saga => fork(saga)));\n}\n\ncheckNetworkCompatbility();\n\n// 1. Initialize\nconst app = dva({\n    initialState: {\n        ...generateContractsInitialState(contractOptions)\n    },\n    extraReducers: {\n        ...drizzleReducers\n    },\n    onError(err, dispatch) {\n        if (err.resp) {\n            message.error(err.resp.msg);\n        } else if (err.srv) {\n            message.error(err.srv.msg);\n        } else {\n            message.error(err);\n        }\n    }\n});\n\n// 2. Plugins\napp.use(\n    createLoading({\n        namespace: 'loading'\n        // effects: enable effects level loading state\n    })\n);\n\n// 3. Model\n// Moved to router.js\napp.model(PoLCModel);\napp.model(LiBAModel);\napp.model(NetworkModel);\n\n// 4. Router\napp.router(require('./router.js').default);\n\n// 5. Start\napp.start('#root');\napp._store.runSaga(rootSaga);\n"],"sourceRoot":""}