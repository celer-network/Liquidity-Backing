{"version":3,"sources":["components/auction/bid-table.js","components/auction/bid-form.js","components/auction/reveal-form.js","routes/auction.js","utils/constant.js","utils/liba.js"],"names":["columns","title","dataIndex","BidTable","this","props","auction","bids","network","unit","getUnitByAddress","supportedTokens","value","tokenAddress","dataSource","_","filter","map","bid","bidder","args","formatCurrencyValue","celerValue","formatCelrValue","pagination","React","Component","drizzleConnect","state","BidForm","context","onSubmit","onClose","form","current","validateFields","err","values","rate","passcode","auctionId","contracts","LiBA","methods","placeBid","cacheSend","web3","utils","soliditySha3","RATE_BASE","toWei","toString","localStorage","setItem","JSON","stringify","createRef","drizzle","visible","formItems","name","field","fieldOptions","currencyFieldOptions","placeholder","rules","minValueRule","message","required","rateFieldOptions","step","precision","RATE_PRECISION","label","celerFieldOptions","onOk","onCancel","type","showIcon","ref","items","contextTypes","PropTypes","object","RevealForm","commitmentID","revealBid","parseInt","PoLC","commitmentOptions","commitmentsByUser","commitment","id","console","log","availableValue","defaultValues","parse","getItem","initialValue","options","Step","Steps","steps","BID","REVEAL","CLAIM","CHALLENGE","FINALIZE","Auction","takeAction","currentPeriod","toggleBidModal","toggleRevealModal","claimWinners","challengeWinners","finalizeAuction","error","setState","prevState","isBidModalVisible","isRevealModalVisible","getWinners","winners","topLoser","send","calculatedWinners","isEqual","notification","challenger","difference","finalizeBid","collectCollateral","repayAuction","sendArgs","EMPTY_ADDRESS","push","calculateRepay","renderAction","accounts","currentStep","currentAccount","asker","FINALIZED","block","onClick","includes","EXPIRED","renderAuctionDetail","ownBidResult","collateralAddress","collateralValue","duration","maxRate","minValue","isEmpty","status","span","style","marginTop","TabPane","tab","key","size","bordered","renderItem","winner","Item","renderProgress","auctionPeriod","blockNumber","action","toLowerCase","blockLeft","blockFieldOptions","formatter","match","params","events","RevealBid","fromBlock","event","returnValues","bidsByUser","cacheCall","ClaimWinners","actions","auctions","getAuction","find","getAuctionPeriod","get","getCurrentPeriod","indexOf","BN","ALL_PERIODS","auctionPeriods","bidEnd","revealEnd","claimEnd","challengeEnd","finalizeEnd","finalized","toNumber","remainingValue","sort","compareBid","forEach","last","result","add","muln","divn","bid1","bid2","rate1","celerValue1","rate2","celerValue2"],"mappings":"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","file":"static/js/5.9647cf29.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Table } from 'antd';\n\nimport {\n    formatCurrencyValue,\n    formatCelrValue,\n    getUnitByAddress\n} from '../../utils/unit';\n\nconst columns = [\n    {\n        title: 'Bidder',\n        dataIndex: 'bidder'\n    },\n    {\n        title: 'Rate',\n        dataIndex: 'rate'\n    },\n    {\n        title: 'Value',\n        dataIndex: 'value'\n    },\n    {\n        title: 'Celer value',\n        dataIndex: 'celerValue'\n    }\n];\n\nclass BidTable extends React.Component {\n    render() {\n        const { auction, bids, network } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n\n        const dataSource = _.filter(bids).map(bid => {\n            const bidder = bid.args[0];\n\n            return {\n                ...bid.value,\n                bidder,\n                value: formatCurrencyValue(bid.value.value, unit),\n                celerValue: formatCelrValue(bid.value.celerValue)\n            };\n        });\n\n        return (\n            <Table\n                dataSource={dataSource}\n                columns={columns}\n                pagination={false}\n            />\n        );\n    }\n}\n\nBidTable.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    LiBA: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {}\n\nexport default drizzleConnect(BidTable, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Modal, Alert } from 'antd';\n\nimport Form from '../form';\nimport {\n    currencyFieldOptions,\n    celerFieldOptions,\n    rateFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress } from '../../utils/unit';\nimport { RATE_PRECISION, RATE_BASE } from '../../utils/constant';\n\nclass BidForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, passcode } = values;\n            const auctionId = auction.args[0];\n\n            this.contracts.LiBA.methods.placeBid.cacheSend(\n                auction.args[0],\n                web3.utils.soliditySha3(\n                    rate * RATE_BASE,\n                    web3.utils.toWei(value.toString(), 'ether'),\n                    web3.utils.toWei(celerValue.toString(), 'ether'),\n                    passcode\n                ),\n                web3.utils.toWei(celerValue.toString(), 'ether')\n            );\n\n            localStorage.setItem(`auction${auctionId}`, JSON.stringify(values));\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                field: 'number',\n                fieldOptions: {\n                    ...rateFieldOptions,\n                    placeholder: 'The lending interest rate',\n                    step: 0.1,\n                    precision: RATE_PRECISION\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'CELR Value',\n                field: 'number',\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'passcode',\n                field: 'number',\n                fieldOptions: {\n                    placeholder: 'A random number used to hide your bid info'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a passcode!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Bid Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Alert\n                    type=\"warning\"\n                    message=\"Once the bid is placed, you have to reveal it, or you will lose staked CELR\"\n                    showIcon\n                />\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nBidForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nBidForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default BidForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Modal } from 'antd';\n\nimport Form from '../form';\nimport {\n    celerFieldOptions,\n    currencyFieldOptions,\n    rateFieldOptions,\n    minValueRule\n} from '../../utils/form';\nimport { getUnitByAddress, formatCurrencyValue } from '../../utils/unit';\nimport { RATE_PRECISION, RATE_BASE } from '../../utils/constant';\n\nclass RevealForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    onSubmit = () => {\n        const { auction, onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { celerValue, value, rate, passcode, commitmentID } = values;\n            this.contracts.LiBA.methods.revealBid.cacheSend(\n                auction.args[0],\n                rate * RATE_BASE,\n                web3.utils.toWei(value.toString(), 'ether'),\n                web3.utils.toWei(celerValue.toString(), 'ether'),\n                passcode,\n                parseInt(commitmentID)\n            );\n            onClose();\n        });\n    };\n\n    render() {\n        const { auction, network, PoLC, visible, onClose } = this.props;\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            auction.value.tokenAddress\n        );\n        const commitmentOptions = _(PoLC.commitmentsByUser)\n            .filter(\n                commitment =>\n                    commitment.value.tokenAddress === auction.value.tokenAddress\n            )\n            .map(commitment => {\n                const id = commitment.args[1];\n                console.log(commitment);\n                const availableValue = formatCurrencyValue(\n                    commitment.value.availableValue,\n                    unit\n                );\n\n                return [id, `ID: ${id}, Available Value: ${availableValue}`];\n            })\n            .value();\n        const defaultValues = JSON.parse(\n            localStorage.getItem(`auction${auction.args[0]}`) || '{}'\n        );\n\n        const formItems = [\n            {\n                name: 'value',\n                field: 'number',\n                initialValue: defaultValues.value,\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to lend'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'rate',\n                field: 'number',\n                initialValue: defaultValues.rate,\n                fieldOptions: {\n                    ...rateFieldOptions,\n                    step: 0.1,\n                    precision: RATE_PRECISION,\n                    placeholder: 'The lending interest rate'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a rate!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'celerValue',\n                label: 'Celer Value',\n                field: 'number',\n                initialValue: defaultValues.celerValue,\n                fieldOptions: {\n                    ...celerFieldOptions,\n                    placeholder: 'The amount of celer token for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a celer value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'passcode',\n                field: 'number',\n                initialValue: defaultValues.passcode,\n                fieldOptions: {\n                    placeholder: 'The random number entered for bidding'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a passcode!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'commitmentID',\n                field: 'select',\n                fieldOptions: {\n                    options: commitmentOptions,\n                    placeholder: 'The commitment in PoLC used for lending'\n                },\n                rules: [\n                    {\n                        message: 'Please enter a commitmentID!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Reveal Auction\"\n                visible={visible}\n                onOk={this.onSubmit}\n                onCancel={onClose}\n            >\n                <Form ref={this.form} items={formItems} />\n            </Modal>\n        );\n    }\n}\n\nRevealForm.propTypes = {\n    auction: PropTypes.object.isRequired,\n    network: PropTypes.object.isRequired,\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nRevealForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { contracts } = state;\n\n    return {\n        PoLC: contracts.PoLC\n    };\n}\n\nexport default drizzleConnect(RevealForm, mapStateToProps);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport {\n    Alert,\n    Button,\n    Card,\n    Steps,\n    Skeleton,\n    Statistic,\n    Tabs,\n    List,\n    Row,\n    Col,\n    Divider,\n    Result,\n    notification\n} from 'antd';\n\nimport BidTable from '../components/auction/bid-table';\nimport BidForm from '../components/auction/bid-form';\nimport RevealForm from '../components/auction/reveal-form';\nimport { formatCurrencyValue, getUnitByAddress } from '../utils/unit';\nimport {\n    getAuctionPeriod,\n    getCurrentPeriod,\n    getWinners,\n    calculateRepay,\n    BID,\n    REVEAL,\n    CLAIM,\n    CHALLENGE,\n    FINALIZE,\n    EXPIRED,\n    FINALIZED\n} from '../utils/liba';\nimport { EMPTY_ADDRESS, RATE_BASE } from '../utils/constant';\nimport { blockFieldOptions } from '../utils/form';\n\nconst { Step } = Steps;\n\nconst steps = [BID, REVEAL, CLAIM, CHALLENGE, FINALIZE];\n\nclass Auction extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.contracts = context.drizzle.contracts;\n        this.state = {\n            auction: null,\n            currentStep: 0,\n            currentPeriod: '',\n            isBidModalVisible: false,\n            isRevealModalVisible: false\n        };\n\n        const auctionId = parseInt(props.match.params.id);\n\n        this.contracts.LiBA.events.RevealBid(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { auctionId, bidder } = event.returnValues;\n                this.contracts.LiBA.methods.bidsByUser.cacheCall(\n                    bidder,\n                    auctionId\n                );\n            }\n        );\n\n        this.contracts.LiBA.events.ClaimWinners(\n            {\n                fromBlock: 0,\n                filter: { auctionId }\n            },\n            (err, event) => {\n                if (err) {\n                    return;\n                }\n\n                const { winners } = event.returnValues;\n                this.setState({\n                    winners\n                });\n            }\n        );\n    }\n\n    static getDerivedStateFromProps(props) {\n        const { match, LiBA = {}, network } = props;\n        const auctions = _.values(LiBA.getAuction);\n        const auction = _.find(\n            auctions,\n            auction => auction.args[0] === match.params.id\n        );\n\n        if (!auction) {\n            return {};\n        }\n\n        const auctionPeriod = getAuctionPeriod(LiBA.getAuctionPeriod, auction);\n        const blockNumber = _.get(network, 'block.number');\n        const currentPeriod = getCurrentPeriod(auctionPeriod, blockNumber);\n        const currentStep = _.indexOf(steps, currentPeriod);\n        const auctionId = auction.args[0];\n        const bids = _.filter(\n            LiBA.bidsByUser,\n            bid => bid.args[1] === auctionId\n        );\n\n        return {\n            auction,\n            auctionId,\n            bids,\n            auctionPeriod,\n            blockNumber,\n            currentPeriod,\n            currentStep\n        };\n    }\n\n    takeAction = () => {\n        const { currentPeriod } = this.state;\n\n        switch (currentPeriod) {\n            case BID:\n                return this.toggleBidModal();\n            case REVEAL:\n                return this.toggleRevealModal();\n            case CLAIM:\n                return this.claimWinners();\n            case CHALLENGE:\n                return this.challengeWinners();\n            case FINALIZE:\n                return this.finalizeAuction();\n            default:\n                console.error('invalid period');\n        }\n    };\n\n    toggleBidModal = () => {\n        this.setState(prevState => ({\n            isBidModalVisible: !prevState.isBidModalVisible\n        }));\n    };\n\n    toggleRevealModal = () => {\n        this.setState(prevState => ({\n            isRevealModalVisible: !prevState.isRevealModalVisible\n        }));\n    };\n\n    claimWinners = () => {\n        const { auctionId } = this.state;\n        const { winners, topLoser } = this.getWinners();\n\n        this.contracts.LiBA.methods\n            .claimWinners(auctionId, winners, topLoser)\n            .send();\n    };\n\n    challengeWinners = () => {\n        const { auctionId, winners } = this.state;\n        const { winners: calculatedWinners, topLoser } = this.getWinners();\n\n        if (_.isEqual(winners, calculatedWinners)) {\n            notification.error({\n                message: 'There is no need to challenge winners'\n            });\n            return;\n        }\n\n        const challenger = _.difference(calculatedWinners, winners)[0];\n\n        this.contracts.LiBA.methods\n            .challengeWinners(\n                auctionId,\n                challenger,\n                calculatedWinners,\n                topLoser\n            )\n            .send();\n    };\n\n    finalizeAuction = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeAuction.cacheSend(auctionId);\n    };\n\n    finalizeBid = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.finalizeBid.cacheSend(auctionId);\n    };\n\n    collectCollateral = () => {\n        const { auctionId } = this.state;\n        this.contracts.LiBA.methods.collectCollateral.cacheSend(auctionId);\n    };\n\n    repayAuction = () => {\n        const { auctionId, auction, bids, winners } = this.state;\n        const { tokenAddress } = auction.value;\n        const sendArgs = [auctionId];\n        if (tokenAddress === EMPTY_ADDRESS) {\n            sendArgs.push({\n                value: calculateRepay(bids, winners).toString()\n            });\n        }\n\n        this.contracts.LiBA.methods.repayAuction.cacheSend(...sendArgs);\n    };\n\n    getWinners = () => {\n        const { auction, bids } = this.state;\n        return getWinners(auction, bids);\n    };\n\n    renderAction = () => {\n        const { accounts } = this.props;\n        const { auction, currentPeriod, currentStep, winners } = this.state;\n        const currentAccount = accounts[0];\n        const isAsker = currentAccount === auction.value.asker;\n\n        if (isAsker) {\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button block type=\"primary\" onClick={this.repayAuction}>\n                        Repay\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([CLAIM, FINALIZE], currentPeriod)) {\n                return [];\n            }\n        } else {\n            if (\n                currentPeriod === EXPIRED ||\n                (currentStep === -1 && !_.includes(winners, currentAccount))\n            ) {\n                return [\n                    <Button block type=\"primary\" onClick={this.finalizeBid}>\n                        Withdraw bid\n                    </Button>\n                ];\n            }\n\n            if (currentPeriod === FINALIZED) {\n                return [\n                    <Button\n                        block\n                        type=\"primary\"\n                        onClick={this.collectCollateral}\n                    >\n                        Collect collateral\n                    </Button>\n                ];\n            }\n\n            if (!_.includes([BID, REVEAL, CHALLENGE], currentPeriod)) {\n                return [];\n            }\n        }\n\n        return [\n            <Button block type=\"primary\" onClick={this.takeAction}>\n                {currentPeriod}\n            </Button>\n        ];\n    };\n\n    renderAuctionDetail = () => {\n        const { network } = this.props;\n        const { auction, bids, winners } = this.state;\n        const {\n            asker,\n            tokenAddress,\n            collateralAddress,\n            collateralValue,\n            value,\n            duration,\n            maxRate,\n            minValue\n        } = auction.value;\n        const unit = getUnitByAddress(network.supportedTokens, tokenAddress);\n        const defaultValues = JSON.parse(\n            localStorage.getItem(`auction${auction.args[0]}`) || '{}'\n        );\n        let ownBidResult;\n\n        if (_.isEmpty(defaultValues)) {\n            ownBidResult = (\n                <Result status=\"warning\" title=\"You have not placed bid yet\" />\n            );\n        } else {\n            ownBidResult = (\n                <Row>\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Value\"\n                            value={`${defaultValues.value}  ${unit}`}\n                        />\n                    </Col>\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Rate\"\n                            value={`${defaultValues.rate} %`}\n                        />\n                    </Col>{' '}\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Celer Value\"\n                            value={`${defaultValues.celerValue} CELR`}\n                        />\n                    </Col>{' '}\n                    <Col span={12}>\n                        <Statistic\n                            title=\"Passcode\"\n                            value={defaultValues.passcode}\n                        />\n                    </Col>\n                </Row>\n            );\n        }\n\n        return (\n            <Row style={{ marginTop: '10px' }}>\n                <Col span={24}>\n                    <Statistic title=\"Asker\" value={asker} />\n                </Col>\n                <Col span={24}>\n                    <Statistic title=\"Token Address\" value={tokenAddress} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Value\"\n                        value={formatCurrencyValue(value, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Duration\" value={`${duration} Day`} />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Min Value\"\n                        value={formatCurrencyValue(minValue, unit)}\n                    />\n                </Col>\n                <Col span={12}>\n                    <Statistic\n                        title=\"Max Rate\"\n                        value={`${maxRate / RATE_BASE} %`}\n                    />\n                </Col>\n                {collateralValue > 0 && (\n                    <>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Address\"\n                                value={collateralAddress}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Collateral Value\"\n                                value={collateralValue}\n                            />\n                        </Col>\n                    </>\n                )}\n\n                <Col span={24}>\n                    <Tabs>\n                        <Tabs.TabPane tab=\"Your Bid\" key=\"own\">\n                            {ownBidResult}\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Bids\" key=\"bids\">\n                            <BidTable\n                                auction={auction}\n                                bids={bids}\n                                network={network}\n                            />\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Winners\" key=\"winners\">\n                            <List\n                                size=\"small\"\n                                bordered\n                                dataSource={winners}\n                                renderItem={winner => (\n                                    <List.Item>{winner}</List.Item>\n                                )}\n                            />\n                        </Tabs.TabPane>\n                    </Tabs>\n                </Col>\n            </Row>\n        );\n    };\n\n    renderProgress = () => {\n        const {\n            auctionPeriod,\n            blockNumber,\n            currentPeriod,\n            currentStep\n        } = this.state;\n\n        if (currentStep === -1) {\n            return <Alert type=\"warning\" message={currentPeriod} showIcon />;\n        }\n\n        const action = currentPeriod.toLowerCase();\n        const blockLeft = auctionPeriod.value[action + 'End'] - blockNumber;\n\n        return (\n            <>\n                <Steps size=\"small\" current={currentStep}>\n                    {_.map(steps, step => (\n                        <Step key={step} title={step} />\n                    ))}\n                </Steps>\n\n                <Divider>\n                    {blockFieldOptions.formatter(blockLeft)} left to {action}\n                </Divider>\n            </>\n        );\n    };\n\n    render() {\n        const { network } = this.props;\n        const { auction, isBidModalVisible, isRevealModalVisible } = this.state;\n\n        if (!auction) {\n            return <Skeleton />;\n        }\n\n        return (\n            <Card title=\"Auction\" actions={this.renderAction()}>\n                {this.renderProgress()}\n                {this.renderAuctionDetail()}\n                <BidForm\n                    auction={auction}\n                    network={network}\n                    visible={isBidModalVisible}\n                    onClose={this.toggleBidModal}\n                />\n                <RevealForm\n                    auction={auction}\n                    network={network}\n                    visible={isRevealModalVisible}\n                    onClose={this.toggleRevealModal}\n                />\n            </Card>\n        );\n    }\n}\n\nAuction.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nAuction.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { accounts, contracts, LiBA, network } = state;\n\n    return {\n        accounts,\n        network,\n        LiBA: { ...LiBA, ...contracts.LiBA }\n    };\n}\n\nexport default drizzleConnect(Auction, mapStateToProps);\n","export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const RATE_PRECISION = 3;\nexport const RATE_BASE = 10 ** RATE_PRECISION;\n","import _ from 'lodash';\nimport web3 from 'web3';\n\nconst { BN } = web3.utils;\n\nexport const BID = 'Bid';\nexport const REVEAL = 'Reveal';\nexport const CLAIM = 'Claim';\nexport const CHALLENGE = 'Challenge';\nexport const FINALIZE = 'Finalize';\nexport const FINALIZED = 'Finalized';\nexport const EXPIRED = 'Expired';\nexport const UNKNOWN = 'Unknown';\nexport const ALL_PERIODS = [\n    BID,\n    REVEAL,\n    CLAIM,\n    CHALLENGE,\n    FINALIZE,\n    FINALIZED,\n    EXPIRED\n];\n\nexport const getAuctionPeriod = (auctionPeriods, auction) => {\n    return _.find(\n        auctionPeriods,\n        auctionPeriod => auctionPeriod.args[0] === auction.args[0]\n    );\n};\n\nexport const getCurrentPeriod = (auctionPeriod, blockNumber) => {\n    const {\n        bidEnd,\n        revealEnd,\n        claimEnd,\n        challengeEnd,\n        finalizeEnd,\n        finalized\n    } = _.get(auctionPeriod, 'value', {});\n\n    if (blockNumber < _.toNumber(bidEnd)) {\n        return BID;\n    }\n\n    if (blockNumber < _.toNumber(revealEnd)) {\n        return REVEAL;\n    }\n\n    if (blockNumber < _.toNumber(claimEnd)) {\n        return CLAIM;\n    }\n\n    if (blockNumber < _.toNumber(challengeEnd)) {\n        return CHALLENGE;\n    }\n\n    if (!finalized && blockNumber < _.toNumber(finalizeEnd)) {\n        return FINALIZE;\n    }\n\n    if (finalized) {\n        return FINALIZED;\n    }\n\n    return EXPIRED;\n};\n\nexport const getWinners = (auction, bids) => {\n    const winners = [];\n    let topLoser;\n    let remainingValue = auction.value.value;\n    bids.sort(compareBid);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value } = bid.value;\n\n        if (remainingValue < 0) {\n            topLoser = bidder;\n            return false;\n        }\n\n        remainingValue -= value;\n        winners.push(bidder);\n    });\n\n    if (!topLoser) {\n        topLoser = _.last(winners);\n    }\n\n    return { winners, topLoser };\n};\n\nexport const calculateRepay = (bids, winners) => {\n    let result = new BN(0);\n\n    _.forEach(bids, bid => {\n        const [bidder] = bid.args;\n        const { value, rate } = bid.value;\n\n        if (!_.includes(winners, bidder)) {\n            return;\n        }\n\n        result = result.add(new BN(value).muln(100 + parseInt(rate)).divn(100));\n    });\n\n    return result;\n};\n\nconst compareBid = (bid1, bid2) => {\n    const { rate1, celerValue1 } = bid1.value;\n    const { rate2, celerValue2 } = bid2.value;\n\n    if (rate1 !== rate2) {\n        return rate1 - rate2;\n    }\n\n    return celerValue2 - celerValue1;\n};\n"],"sourceRoot":""}