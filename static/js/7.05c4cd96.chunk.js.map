{"version":3,"sources":["components/polc/commitment-form.js","routes/polc.js","utils/constant.js","../alert/index.jsx"],"names":["CommimentForm","props","context","handleValueChange","changedValue","setState","handleCommitFund","onClose","form","current","validateFields","err","values","token","duration","value","formatedValue","web3","utils","toWei","toString","sendArgs","EMPTY_ADDRESS","push","contracts","PoLC","methods","commitFund","cacheSend","resetFields","state","React","createRef","drizzle","this","network","visible","supportedTokenOptions","supportedTokens","map","supportedToken","address","symbol","unit","getUnitByAddress","formItems","name","field","fieldOptions","options","placeholder","rules","message","required","currencyFieldOptions","minValueRule","dayFieldOptions","title","onOk","onCancel","type","showIcon","ref","items","onValuesChange","Component","contextTypes","PropTypes","object","formatDayTime","day","Date","_","toNumber","toLocaleDateString","checkLock","toggleModal","prevState","isModalVisible","withdrawFund","e","index","currentTarget","dataset","commitment","commitmentsByUser","lockEnd","commitmentId","args","error","withdrawReward","renderCommitment","tokenAddress","availableValue","lendingValue","console","log","Item","actions","data-index","icon","size","onClick","span","groupSeparator","formatCurrencyValue","renderCommiments","data","grid","gutter","column","dataSource","renderItem","extra","drizzleConnect","RATE_PRECISION","RATE_BASE","noop","Alert","dom","ReactDOM","closing","closed","getPrefixCls","description","customizePrefixCls","closeText","banner","className","style","closable","iconType","prefixCls","iconTheme","alertCls","classNames","closeIcon","tabIndex","dataOrAriaProps","getDataOrAriaProps","iconNode","theme","component","showProp","transitionName","onEnd","animationEnd","data-show","warning"],"mappings":"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","file":"static/js/7.05c4cd96.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport web3 from 'web3';\nimport { Alert, Modal } from 'antd';\n\nimport Form from '../form';\nimport { EMPTY_ADDRESS } from '../../utils/constant';\nimport { getUnitByAddress } from '../../utils/unit';\nimport {\n    currencyFieldOptions,\n    dayFieldOptions,\n    minValueRule\n} from '../../utils/form';\n\nclass CommimentForm extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = {};\n        this.form = React.createRef();\n        this.contracts = context.drizzle.contracts;\n    }\n\n    handleValueChange = changedValue => this.setState(changedValue);\n\n    handleCommitFund = () => {\n        const { onClose } = this.props;\n\n        this.form.current.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            const { token, duration, value } = values;\n            const formatedValue = web3.utils.toWei(value.toString(), 'ether');\n            const sendArgs = [token, duration, formatedValue];\n            if (token === EMPTY_ADDRESS) {\n                sendArgs.push({ value: formatedValue });\n            }\n\n            this.contracts.PoLC.methods.commitFund.cacheSend(...sendArgs);\n            this.form.current.resetFields();\n            onClose();\n        });\n    };\n\n    render() {\n        const { network, visible, onClose } = this.props;\n        const supportedTokenOptions = network.supportedTokens.map(\n            supportedToken => [\n                supportedToken.address,\n                `${supportedToken.symbol} (${supportedToken.address})`\n            ]\n        );\n        const unit = getUnitByAddress(\n            network.supportedTokens,\n            this.state.token\n        );\n\n        const formItems = [\n            {\n                name: 'token',\n                field: 'select',\n                fieldOptions: {\n                    options: supportedTokenOptions,\n                    placeholder: 'Token type to commit'\n                },\n                rules: [\n                    {\n                        message: 'Please select a token!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'value',\n                field: 'number',\n                fieldOptions: {\n                    ...currencyFieldOptions(unit),\n                    placeholder: 'The amount of token to commit'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a value!',\n                        required: true\n                    }\n                ]\n            },\n            {\n                name: 'duration',\n                field: 'number',\n                fieldOptions: {\n                    ...dayFieldOptions,\n                    placeholder: 'Lock-in duration'\n                },\n                rules: [\n                    minValueRule(0),\n                    {\n                        message: 'Please enter a duration!',\n                        required: true\n                    }\n                ]\n            }\n        ];\n\n        return (\n            <Modal\n                title=\"Commit Fund\"\n                visible={visible}\n                onOk={this.handleCommitFund}\n                onCancel={onClose}\n            >\n                <Alert\n                    message=\"Your fund will not be available until the commitment expires\"\n                    type=\"warning\"\n                    showIcon\n                />\n                <Form\n                    ref={this.form}\n                    items={formItems}\n                    onValuesChange={this.handleValueChange}\n                />\n            </Modal>\n        );\n    }\n}\n\nCommimentForm.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired\n};\n\nCommimentForm.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nexport default CommimentForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { drizzleConnect } from 'drizzle-react';\nimport { Button, Card, List, Statistic, Row, Col, message } from 'antd';\n\nimport CommimentForm from '../components/polc/commitment-form';\nimport { getUnitByAddress, formatCurrencyValue } from '../utils/unit';\n\nconst DAY = 24 * 60 * 60 * 1000;\n\nconst formatDayTime = day => {\n    const date = day !== '0' ? new Date(_.toNumber(day) * DAY) : new Date();\n    return date.toLocaleDateString();\n};\n\nconst checkLock = day => {\n    return _.toNumber(day) < new Date() / DAY;\n};\n\nclass PoLC extends React.Component {\n    constructor(props, context) {\n        super(props);\n\n        this.state = { isModalVisible: false };\n        this.contracts = context.drizzle.contracts;\n    }\n\n    toggleModal = () => {\n        this.setState(prevState => ({\n            isModalVisible: !prevState.isModalVisible\n        }));\n    };\n\n    withdrawFund = e => {\n        const { index } = e.currentTarget.dataset;\n        const { PoLC } = this.props;\n        const commitment = _.values(PoLC.commitmentsByUser)[index];\n\n        const { lockEnd } = commitment.value;\n        const [, commitmentId] = commitment.args;\n\n        if (!checkLock(lockEnd)) {\n            message.error('Cannot withdraw fund before expiration');\n            return;\n        }\n        this.contracts.PoLC.methods.withdrawFund.cacheSend(commitmentId);\n    };\n\n    withdrawReward = e => {\n        const { index } = e.currentTarget.dataset;\n        const { PoLC } = this.props;\n        const commitment = _.values(PoLC.commitmentsByUser)[index];\n        const { lockEnd } = commitment.value;\n        const [, commitmentId] = commitment.args;\n\n        if (!checkLock(lockEnd)) {\n            message.error('Cannot withdraw reward before expiration');\n            return;\n        }\n        this.contracts.PoLC.methods.withdrawReward.cacheSend(commitmentId);\n    };\n\n    renderCommitment = (commitment, index) => {\n        const { network } = this.props;\n        const {\n            tokenAddress,\n            lockEnd,\n            availableValue,\n            lendingValue\n        } = commitment.value;\n        const commitmentId = commitment.args[1];\n        const unit = getUnitByAddress(network.supportedTokens, tokenAddress);\n        console.log(network.supportedTokens, tokenAddress);\n        return (\n            <List.Item>\n                <Card\n                    actions={[\n                        <Button\n                            data-index={index}\n                            icon=\"export\"\n                            size=\"small\"\n                            title=\"Withdraw Fund\"\n                            type=\"link\"\n                            onClick={this.withdrawFund}\n                        >\n                            Withdraw\n                        </Button>,\n                        <Button\n                            data-index={index}\n                            icon=\"dollar\"\n                            size=\"small\"\n                            title=\"Withdraw Reward\"\n                            type=\"link\"\n                            onClick={this.withdrawReward}\n                        >\n                            Reward\n                        </Button>\n                    ]}\n                >\n                    <Row>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"ID\"\n                                groupSeparator=\"\"\n                                value={commitmentId}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Lock End\"\n                                value={formatDayTime(lockEnd)}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Available Value\"\n                                value={formatCurrencyValue(\n                                    availableValue,\n                                    unit\n                                )}\n                            />\n                        </Col>\n                        <Col span={12}>\n                            <Statistic\n                                title=\"Lending Value\"\n                                value={formatCurrencyValue(lendingValue, unit)}\n                            />\n                        </Col>\n                    </Row>\n                </Card>\n            </List.Item>\n        );\n    };\n\n    renderCommiments = () => {\n        const { PoLC } = this.props;\n        const data = _.values(PoLC.commitmentsByUser);\n\n        return (\n            <List\n                grid={{ gutter: 16, column: 3 }}\n                dataSource={data}\n                renderItem={this.renderCommitment}\n            />\n        );\n    };\n\n    render() {\n        const { isModalVisible } = this.state;\n        const { network } = this.props;\n\n        return (\n            <Card\n                title=\"Fund\"\n                extra={\n                    <Button type=\"primary\" onClick={this.toggleModal}>\n                        Commit fund\n                    </Button>\n                }\n            >\n                {this.renderCommiments()}\n                <CommimentForm\n                    network={network}\n                    visible={isModalVisible}\n                    onClose={this.toggleModal}\n                />\n            </Card>\n        );\n    }\n}\n\nPoLC.propTypes = {\n    dispatch: PropTypes.func.isRequired\n};\n\nPoLC.contextTypes = {\n    drizzle: PropTypes.object\n};\n\nfunction mapStateToProps(state) {\n    const { contracts, network } = state;\n    return {\n        network,\n        PoLC: contracts.PoLC\n    };\n}\n\nexport default drizzleConnect(PoLC, mapStateToProps);\n","export const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const RATE_PRECISION = 1;\nexport const RATE_BASE = 10 ** RATE_PRECISION;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Animate from 'rc-animate';\nimport classNames from 'classnames';\nimport Icon from '../icon';\nimport { ConfigConsumer } from '../config-provider';\nimport getDataOrAriaProps from '../_util/getDataOrAriaProps';\nimport warning from '../_util/warning';\nfunction noop() { }\nexport default class Alert extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = (e) => {\n            e.preventDefault();\n            const dom = ReactDOM.findDOMNode(this);\n            dom.style.height = `${dom.offsetHeight}px`;\n            // Magic code\n            // 重复一次后才能正确设置 height\n            dom.style.height = `${dom.offsetHeight}px`;\n            this.setState({\n                closing: true,\n            });\n            (this.props.onClose || noop)(e);\n        };\n        this.animationEnd = () => {\n            this.setState({\n                closing: false,\n                closed: true,\n            });\n            (this.props.afterClose || noop)();\n        };\n        this.renderAlert = ({ getPrefixCls }) => {\n            const { description, prefixCls: customizePrefixCls, message, closeText, banner, className = '', style, icon, } = this.props;\n            let { closable, type, showIcon, iconType } = this.props;\n            const { closing, closed } = this.state;\n            const prefixCls = getPrefixCls('alert', customizePrefixCls);\n            // banner模式默认有 Icon\n            showIcon = banner && showIcon === undefined ? true : showIcon;\n            // banner模式默认为警告\n            type = banner && type === undefined ? 'warning' : type || 'info';\n            let iconTheme = 'filled';\n            if (!iconType) {\n                switch (type) {\n                    case 'success':\n                        iconType = 'check-circle';\n                        break;\n                    case 'info':\n                        iconType = 'info-circle';\n                        break;\n                    case 'error':\n                        iconType = 'close-circle';\n                        break;\n                    case 'warning':\n                        iconType = 'exclamation-circle';\n                        break;\n                    default:\n                        iconType = 'default';\n                }\n                // use outline icon in alert with description\n                if (description) {\n                    iconTheme = 'outlined';\n                }\n            }\n            // closeable when closeText is assigned\n            if (closeText) {\n                closable = true;\n            }\n            const alertCls = classNames(prefixCls, `${prefixCls}-${type}`, {\n                [`${prefixCls}-closing`]: closing,\n                [`${prefixCls}-with-description`]: !!description,\n                [`${prefixCls}-no-icon`]: !showIcon,\n                [`${prefixCls}-banner`]: !!banner,\n                [`${prefixCls}-closable`]: closable,\n            }, className);\n            const closeIcon = closable ? (<button type=\"button\" onClick={this.handleClose} className={`${prefixCls}-close-icon`} tabIndex={0}>\n        {closeText ? (<span className={`${prefixCls}-close-text`}>{closeText}</span>) : (<Icon type=\"close\"/>)}\n      </button>) : null;\n            const dataOrAriaProps = getDataOrAriaProps(this.props);\n            const iconNode = (icon &&\n                (React.isValidElement(icon) ? (React.cloneElement(icon, {\n                    className: classNames(`${prefixCls}-icon`, {\n                        [icon.props.className]: icon.props.className,\n                    }),\n                })) : (<span className={`${prefixCls}-icon`}>{icon}</span>))) || <Icon className={`${prefixCls}-icon`} type={iconType} theme={iconTheme}/>;\n            return closed ? null : (<Animate component=\"\" showProp=\"data-show\" transitionName={`${prefixCls}-slide-up`} onEnd={this.animationEnd}>\n        <div data-show={!closing} className={alertCls} style={style} {...dataOrAriaProps}>\n          {showIcon ? iconNode : null}\n          <span className={`${prefixCls}-message`}>{message}</span>\n          <span className={`${prefixCls}-description`}>{description}</span>\n          {closeIcon}\n        </div>\n      </Animate>);\n        };\n        warning(!('iconType' in props), 'Alert', '`iconType` is deprecated. Please use `icon` instead.');\n        this.state = {\n            closing: false,\n            closed: false,\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderAlert}</ConfigConsumer>;\n    }\n}\n"],"sourceRoot":""}